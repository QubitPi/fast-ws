# Copyright Jiaqi Liu
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
name: Template CI/CD

"on":
  pull_request:
  push:
    branches:
      - master

env:
  JDK_VERSION: 17
  JDK_DISTRIBUTION: 'adopt'
  USER: QubitPi
  EMAIL: jack20220723@gmail.com

jobs:
  yaml-lint:
    name: YAML Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actionshub/yamllint@main
  markdown-lint:
    name: Markdown Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actionshub/markdownlint@main
  markdown-link-check:
    name: Markdown Link Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-verbose-mode: "yes"

  tests:
    name: Unit & Integration Tests
    needs: [yaml-lint, markdown-lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: ${{ env.JDK_DISTRIBUTION }}
      - name: Set up Docker for Integration Tests
        uses: docker-practice/actions-setup-docker@master
      - name: Run unit & integration tests
        run: mvn -B clean verify
      - name: Sonar Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B -Pcoverage sonar:sonar org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.java.binaries=target/classes -Dsonar.projectKey=QubitPi_jersey-webservice-template

  documentation:
    name: Test & Release Documentation (including Javadoc)
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: ${{ env.JDK_DISTRIBUTION }}
      - name: Install dependencies
        working-directory: docs
        run: yarn
      - name: Build documentations
        working-directory: docs
        run: yarn build
      - name: Generate Javadoc
        run: mvn -B clean javadoc:javadoc
      - name: Move Javadoc into documentation directory
        if: github.ref == 'refs/heads/master'
        run: mv target/site/apidocs/ docs/build/apidocs/
      - name: Deploy documentation (including Javadoc) to GitHub Pages
        if: github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/build
          enable_jekyll: false
          user_name: ${{ env.USER }}
          user_email: ${{ env.EMAIL }}

  docker-image:
    name: Build Test & Release Development Docker Image
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: ${{ env.JDK_DISTRIBUTION }}
      - name: Build App WAR file so that Docker can pickup during image build
        run: mvn clean package
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Test image build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
      - name: Login to DockerHub
        if: github.ref == 'refs/heads/master'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push image to DockerHub
        if: github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/jersey-webservice-template:latest

  hashicorp:
    name: Generated Webservice WAR in GitHub Action, and Publish Template AMI Image and Deploy it to EC2 through HashiCorp
    if: ${{ github.event.repository.name != 'jersey-webservice-template' }}
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Environment setup
        uses: ./.github/actions/setup
        with:
          runbooks-repo-token: ${{ secrets.RUNBOOKS_REPO_TOKEN }}
      - name: Generate webservice WAR file
        run: mvn -B clean package
      - name: Move WAR file to a location for HashiCorp deployment to pickup
        run: |
          mkdir ../WAR
          mv target/my-webservice-1.0-SNAPSHOT.war ../WAR
      - name: QubitPi/hashicorp-aws
        uses: QubitPi/hashicorp-aws@master
        with:
          hashicorp-dir: ../hashicorp-aws/hashicorp/webservice
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
