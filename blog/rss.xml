<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Jersey Webservice Template Blog</title>
        <link>https://qubitpi.github.io/jersey-webservice-template/blog</link>
        <description>Jersey Webservice Template Blog</description>
        <lastBuildDate>Fri, 24 Nov 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[What is Java EE]]></title>
            <link>https://qubitpi.github.io/jersey-webservice-template/blog/java-ee</link>
            <guid>https://qubitpi.github.io/jersey-webservice-template/blog/java-ee</guid>
            <pubDate>Fri, 24 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Java EE is a collection of specifications for developing]]></description>
            <content:encoded><![CDATA[<p><a href="https://www.oracle.com/java/technologies/java-ee-glance.html" target="_blank" rel="noopener noreferrer">Java EE</a> is a collection of specifications for developing
and deploying enterprise applications.</p>
<p>In general, enterprise applications refer to software hosted on servers that provide the applications that support the
enterprise.</p>
<p>The specifications (defined by Sun) describe services, application programming interfaces (APIs), and protocols.</p>
<p>The Java EE product provider is typically an application-server, web-server, or database-system vendor who provides
classes that implement the interfaces defined in the specifications. These vendors compete on implementations of the
Java EE specifications.</p>
<p>When a company requires Java EE experience what are they really asking for is experience using the technologies that
make up Java EE. Frequently, a company will only be using a subset of the Java EE technologies.</p>
<p>A reference implementation of Java EE is <a href="https://javaee.github.io/glassfish/documentation" target="_blank" rel="noopener noreferrer">GlassFish</a></p>]]></content:encoded>
            <category>Java</category>
            <category>Standard</category>
        </item>
        <item>
            <title><![CDATA[Understanding Weak References]]></title>
            <link>https://qubitpi.github.io/jersey-webservice-template/blog/weak-references</link>
            <guid>https://qubitpi.github.io/jersey-webservice-template/blog/weak-references</guid>
            <pubDate>Fri, 24 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Strong References]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="strong-references">Strong References<a href="https://qubitpi.github.io/jersey-webservice-template/blog/weak-references#strong-references" class="hash-link" aria-label="Direct link to Strong References" title="Direct link to Strong References">​</a></h2>
<p>A <strong>strong reference</strong> is an ordinary Java reference, the kind you use every day. For example, the code:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">StringBuffer</span><span class="token plain"> buffer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">StringBuffer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>creates a new <code>StringBuffer</code> and stores a strong reference to it in the variable <code>buffer</code>. Yes, yes, this is kiddie
stuff, but bear with me. <em>The important part about strong references -- the part that makes them "strong" -- is how they
interact with the garbage collector</em>. Specifically, if an object is reachable via a chain of strong references (strongly
reachable), it is not eligible for garbage collection. As you don't want the garbage collector destroying objects you're
working on, this is normally exactly what you want.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="when-strong-references-are-too-strong">When Strong References are Too Strong<a href="https://qubitpi.github.io/jersey-webservice-template/blog/weak-references#when-strong-references-are-too-strong" class="hash-link" aria-label="Direct link to When Strong References are Too Strong" title="Direct link to When Strong References are Too Strong">​</a></h2>
<p>It's not uncommon for an application to use classes that it can't reasonably extend. The class might simply be marked
<code>final</code>, or it could be something more complicated, such as an interface returned by a factory method backed by an
unknown (and possibly even unknowable) number of concrete implementations. Suppose you have to use a class <code>Widget</code> and,
for whatever reason, it isn't possible or practical to extend <code>Widget</code> to add new functionality.</p>
<p>What happens when you need to keep track of extra information about the object? In this case, suppose we find ourselves
needing to keep track of each Widget's serial number, but the Widget class doesn't actually have a serial number
property -- and because Widget isn't extensible, we can't add one. No problem at all, that's what <code>HashMaps</code> are for:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">serialNumberMap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">put</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">widget</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> widgetSerialNumber</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This might look okay on the surface, but the strong reference to widget will almost certainly cause problems. We have to
know (with 100% certainty) when a particular Widget's serial number is no longer needed, so we can remove its entry from
the map. Otherwise we're going to have a memory leak (if we don't remove Widgets when we should) or we're going to
inexplicably find ourselves missing serial numbers (if we remove Widgets that we're still using). If these problems
sound familiar, they should: they are exactly the problems that users of non-garbage-collected languages face when
trying to manage memory, and we're not supposed to have to worry about this in a more civilized language like Java.</p>
<p>Another common problem with strong references is caching, particular with very large structures like images. Suppose you
have an application which has to work with user-supplied images, like the web site design tool I work on. Naturally you
want to cache these images, because loading them from disk is very expensive and you want to avoid the possibility of
having two copies of the (potentially gigantic) image in memory at once. Because an image cache is supposed to prevent
us from reloading images when we don't absolutely need to, you will quickly realize that the cache should always contain
a reference to any image which is already in memory. With ordinary strong references, though, that reference itself will
force the image to remain in memory, which requires you (just as above) to somehow determine when the image is no longer
needed in memory and remove it from the cache, so that it becomes eligible for garbage collection. Once again you are
forced to duplicate the behavior of the garbage collector and manually determine whether or not an object should be in
memory.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="weak-references">Weak References<a href="https://qubitpi.github.io/jersey-webservice-template/blog/weak-references#weak-references" class="hash-link" aria-label="Direct link to Weak References" title="Direct link to Weak References">​</a></h2>
<p>A <strong>weak reference</strong>, simply put, is a reference that isn't strong enough to force an object to remain in memory. Weak
references allow you to leverage the garbage collector's ability to determine reachability for you, so you don't have to
do it yourself. You create a weak reference like this:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">WeakReference</span><span class="token plain"> weakWidget </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">WeakReference</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">widget</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>and then elsewhere in the code you can use <code>weakWidget.get()</code> to get the actual Widget object. Of course the weak
reference isn't strong enough to prevent garbage collection, so you may find (if there are no strong references to the
widget) that <code>weakWidget.get()</code> suddenly starts returning <code>null</code>.</p>
<p>To solve the "widget serial number" problem above, the easiest thing to do is use the built-in <code>WeakHashMap</code> class.
<code>WeakHashMap</code> works exactly like <code>HashMap</code>, except that the keys (not the values!) are referred to using weak
references. If a <code>WeakHashMap</code> key becomes garbage, its entry is removed automatically. This avoids the pitfalls
described earlier and requires no changes other than the switch from <code>HashMap</code> to a <code>WeakHashMap</code>. If you're following
the standard convention of referring to your maps via the Map interface, no other code needs to even be aware of the
change.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="reference-queues">Reference Queues<a href="https://qubitpi.github.io/jersey-webservice-template/blog/weak-references#reference-queues" class="hash-link" aria-label="Direct link to Reference Queues" title="Direct link to Reference Queues">​</a></h2>
<p>Once a <code>WeakReference</code> starts returning <code>null</code>, the object it pointed to has become garbage and the <code>WeakReference</code>
object is pretty much useless. This generally means that some sort of cleanup is required; <code>WeakHashMap</code>, for example,
has to remove such defunct entries to avoid holding onto an ever-increasing number of dead <code>WeakReferences</code>.</p>
<p>The <code>ReferenceQueue</code> class makes it easy to keep track of dead references. If you pass a <code>ReferenceQueue</code> into a weak
reference's constructor, the reference object will be automatically inserted into the reference queue when the object to
which it pointed becomes garbage. You can then, at some regular interval, process the <code>ReferenceQueue</code> and perform
whatever cleanup is needed for dead references.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="different-degrees-of-weakness">Different Degrees of Weakness<a href="https://qubitpi.github.io/jersey-webservice-template/blog/weak-references#different-degrees-of-weakness" class="hash-link" aria-label="Direct link to Different Degrees of Weakness" title="Direct link to Different Degrees of Weakness">​</a></h2>
<p>Up to this point I've just been referring to "weak references", but there are actually <strong>4 degrees of reference
strength</strong> (in order from strongest to weakest):</p>
<ol>
<li>strong</li>
<li>soft</li>
<li>weak</li>
<li>phantom</li>
</ol>
<p>We've already discussed strong and weak references, so let's take a look at the other two.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="soft-references">Soft References<a href="https://qubitpi.github.io/jersey-webservice-template/blog/weak-references#soft-references" class="hash-link" aria-label="Direct link to Soft References" title="Direct link to Soft References">​</a></h2>
<p>A <strong>soft reference</strong> is exactly like a weak reference, except that it is less eager to throw away the object to which it
refers. An object which is only weakly reachable will be discarded at the next garbage collection cycle, but an object
which is softly reachable will generally stick around for a while.</p>
<p>Soft references aren't required to behave any differently than weak references, but in practice softly reachable objects
are generally retained as long as memory is in plentiful supply. <strong>This makes them an excellent foundation for a
cache</strong>, such as the image cache described above, since you can let the garbage collector worry about both how reachable
the objects are and how badly it needs the memory they are consuming.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="phantom-references">Phantom References<a href="https://qubitpi.github.io/jersey-webservice-template/blog/weak-references#phantom-references" class="hash-link" aria-label="Direct link to Phantom References" title="Direct link to Phantom References">​</a></h2>
<p>A <strong>phantom reference</strong> is quite different than either soft reference or weak reference. Its grip on its object is so
tenuous that you can't even retrieve the object - its <code>get()</code> method always returns <code>null</code>. <strong>The only use for such a
reference is keeping track of when it gets enqueued into a <code>ReferenceQueue</code>, as at that point you know the object to
which it pointed is dead</strong>. How is that different from weak reference, though?</p>
<p>The difference is in exactly when the enqueuing happens. <code>WeakReferences</code> are enqueued as soon as the object to which
they point becomes weakly reachable. This is before finalization or garbage collection has actually happened; in theory
the object could even be "resurrected" by an unorthodox <code>finalize()</code> method, but the <code>WeakReference</code> would remain dead.
<code>PhantomReferences</code> are enqueued only when the object is physically removed from memory, and the <code>get()</code> method always
returns <code>null</code> specifically to prevent you from being able to "resurrect" an almost-dead object.</p>
<p>What good are <code>PhantomReferences</code>? I'm only aware of two serious cases for them: first, they allow you to determine
exactly when an object was removed from memory. They are in fact the only way to determine that. This isn't generally
that useful, but might come in handy in certain very specific circumstances like manipulating large images: if you know
for sure that an image should be garbage collected, you can wait until it actually is before attempting to load the next
image, and therefore make the dreaded <code>OutOfMemoryError</code> less likely.</p>
<p>Second, phantom references avoid a fundamental problem with finalization: <code>finalize()</code> methods can "resurrect" objects
by creating new strong references to them. So what, you say? Well, the problem is that an object which overrides
<code>finalize()</code> must now be determined to be garbage in at least two separate garbage collection cycles in order to be
collected. When the first cycle determines that it is garbage, it becomes eligible for finalization. Because of the
(slim, but unfortunately real) possibility that the object was "resurrected" during finalization, the garbage collector
has to run again before the object can actually be removed. And because finalization might not have happened in a timely
fashion, an arbitrary number of garbage collection cycles might have happened while the object was waiting for
finalization. This can mean serious delays in actually cleaning up garbage objects, and is why you can get
<code>OutOfMemoryErrors</code> even when most of the heap is garbage.</p>
<p>With phantom reference, this situation is impossible -- when a <code>PhantomReference</code> is enqueued, there is absolutely no
way to get a pointer to the now-dead object (which is good, because it isn't in memory any longer). Because
<code>PhantomReference</code> cannot be used to resurrect an object, the object can be instantly cleaned up during the first
garbage collection cycle in which it is found to be phantomly reachable. You can then dispose whatever resources you
need to at your convenience.</p>
<p>Arguably, the <code>finalize()</code> method should never have been provided in the first place. phantom references are definitely
safer and more efficient to use, and eliminating <code>finalize()</code> would have made parts of the VM considerably simpler. But,
they're also more work to implement, so I confess to still using <code>finalize()</code> most of the time. The good news is that at
least you have a choice.</p>]]></content:encoded>
            <category>Java</category>
        </item>
        <item>
            <title><![CDATA[Bearer Authentication]]></title>
            <link>https://qubitpi.github.io/jersey-webservice-template/blog/bearer-authentication</link>
            <guid>https://qubitpi.github.io/jersey-webservice-template/blog/bearer-authentication</guid>
            <pubDate>Thu, 23 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Bearer authentication (also called token authentication) is an]]></description>
            <content:encoded><![CDATA[<p><strong>Bearer authentication</strong> (also called <strong>token authentication</strong>) is an
<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication" target="_blank" rel="noopener noreferrer">HTTP authentication scheme</a> that involves security tokens called bearer tokens. The name
"Bearer authentication" can be understood as "give access to the bearer of this token." The bearer token is a cryptic
string, usually generated by the server in response to a login request. The client must send this token in the
<code>Authorization</code> header when making requests to protected resources:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Authorization: Bearer </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">token</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The Bearer authentication scheme was originally created as part of <a href="https://swagger.io/docs/specification/authentication/oauth2/" target="_blank" rel="noopener noreferrer">OAuth 2.0</a> in <a href="https://tools.ietf.org/html/rfc6750" target="_blank" rel="noopener noreferrer">RFC 6750</a>, but
is sometimes also used on its own. Similarly to <a href="https://swagger.io/docs/specification/authentication/basic-authentication/" target="_blank" rel="noopener noreferrer">Basic authentication</a>, Bearer authentication
should only be used over HTTPS (SSL).</p>]]></content:encoded>
            <category>Security</category>
        </item>
        <item>
            <title><![CDATA[Tired of Null Pointer Exceptions? Consider Using Java SE 8's "Optional"]]></title>
            <link>https://qubitpi.github.io/jersey-webservice-template/blog/java-optional</link>
            <guid>https://qubitpi.github.io/jersey-webservice-template/blog/java-optional</guid>
            <pubDate>Thu, 23 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Make your code more readable and protect it against null pointer exceptions.]]></description>
            <content:encoded><![CDATA[<p>Make your code more readable and protect it against null pointer exceptions.</p>
<p>A wise man once said you are not a real Java programmer until you've dealt with a null pointer exception. Joking aside,
the null reference is the source of many problems because it is often used to denote the absence of a value. Java SE 8
introduces a new class called <strong>java.util.Optional</strong> that can alleviate some of these problems.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dangers-of-null">Dangers of Null<a href="https://qubitpi.github.io/jersey-webservice-template/blog/java-optional#dangers-of-null" class="hash-link" aria-label="Direct link to Dangers of Null" title="Direct link to Dangers of Null">​</a></h2>
<p>Let's start with an example to see the dangers of null by considering a nested object structure for a <code>Computer</code>, as
illustrated in Figure below</p>
<p><img loading="lazy" alt="Error loading java-optional-computer.png" src="https://qubitpi.github.io/jersey-webservice-template/assets/images/java-optional-computer-1bc0c3f95c53bca9751cccc2d7c17534.png" width="277" height="255" class="img_ev3q"></p>
<p>What's possibly problematic with the following code?</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">String</span><span class="token plain"> version </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> computer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getSoundcard</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getUSB</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getVersion</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This code looks pretty reasonable. However, many computers (for example, the Raspberry Pi) don't actually ship with a
sound card. So what is the result of <code>getSoundcard()</code>?</p>
<p>A common (bad) practice is to return the null reference to indicate the absence of a sound card. Unfortunately, this
means the call to <code>getUSB()</code> will try to return the USB port of a null reference, which will result in a
<code>NullPointerException</code> at runtime and stop your program from running further. Imagine if your program was running on a
customer's machine; what would your customer say if the program suddenly failed?</p>
<p>To give some historical context, Tony Hoare - one of the giants of computer science - wrote, "I call it my
billion-dollar mistake. It was the invention of the null reference in 1965. I couldn't resist the temptation to put in
a null reference, simply because it was so easy to implement."</p>
<p>What can you do to prevent unintended null pointer exceptions? You can be defensive and add checks to prevent null
dereferences, as shown below:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">String</span><span class="token plain"> version </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"UNKNOWN"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">computer </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Soundcard</span><span class="token plain"> soundcard </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> computer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getSoundcard</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">soundcard </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">USB</span><span class="token plain"> usb </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> soundcard</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getUSB</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">usb </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            version </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> usb</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getVersion</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>However, you can see that the code quickly becomes very ugly due to the nested checks. Unfortunately, we need a lot of
boilerplate code to make sure we don't get a NullPointerException. In addition, it's just annoying that these checks get
in the way of the business logic. In fact, they are decreasing the overall readability of our program.</p>
<p>Furthermore, it is an error-prone process; what if you forget to check that one property could be null? I will argue in
this post that using null to represent the absence of a value is a wrong approach. What we need is a better way to
model the absence and presence of a value.</p>
<p>To give some context, let's briefly look at what other programming languages have to offer.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-alternatives-to-null-are-there">What Alternatives to Null Are There<a href="https://qubitpi.github.io/jersey-webservice-template/blog/java-optional#what-alternatives-to-null-are-there" class="hash-link" aria-label="Direct link to What Alternatives to Null Are There" title="Direct link to What Alternatives to Null Are There">​</a></h2>
<p>Languages such as Groovy have a <em>safe navigation operator</em> represented by "?." to safely navigate through potential
null references. (Note that it is soon to be included in C#, too, and it was proposed for Java SE 7 but didn't make it
into that release.) It works as follows:</p>
<div class="language-groovy codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-groovy codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">String version = computer?.getSoundcard()?.getUSB()?.getVersion()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In this case, the variable "version" will be assigned to null if <code>computer</code> is null, or <code>getSoundcard()</code> returns null,
or <code>getUSB()</code> returns null. You don't need to write complex nested conditions to check for null.</p>
<p>In addition, Groovy also includes the <em>Elvis operator</em> "?:" (if you look at it sideways, you'll recognize Elvis' famous
hair), which can be used for simple cases when a default value is needed. In the following, if the expression that uses
the safe navigation operator returns null, the default value "UNKNOWN" is returned; otherwise, the available version
tag is returned.</p>
<div class="language-groovy codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-groovy codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">String version = computer?.getSoundcard()?.getUSB()?.getVersion() ?: "UNKNOWN"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Other functional languages, such as Haskell and Scala, take a different view. Haskell includes a <strong>Maybe</strong> type, which
essentially encapsulates an optional value. A value of type Maybe can contain either a value of a given type or
nothing. There is no concept of a null reference. Scala has a similar construct called <strong>Option[T]</strong> to encapsulate
the presence or absence of a value of type <code>T</code>. You then have to explicitly check whether a value is present or not
using operations available on the <code>Option</code> type, which enforces the idea of "null checking." <strong>You can no longer
"forget to do it" because it is enforced by the type system</strong>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="java-8-optional-in-a-nutshell">Java 8 <em>Optional</em> in a Nutshell<a href="https://qubitpi.github.io/jersey-webservice-template/blog/java-optional#java-8-optional-in-a-nutshell" class="hash-link" aria-label="Direct link to java-8-optional-in-a-nutshell" title="Direct link to java-8-optional-in-a-nutshell">​</a></h2>
<p>Java SE 8 introduces a new class called <code>java.util.Optional&lt;T&gt;</code> that is inspired from the ideas of Haskell and Scala.
It is a class that encapsulates an optional value, as illustrated in figure below. You can view <code>Optional</code> as a
single-value container that either contains a value or doesn't (it is then said to be "empty"):</p>
<p><img loading="lazy" alt="Error loading java-optional-eg.png" src="https://qubitpi.github.io/jersey-webservice-template/assets/images/java-optional-eg-8885f6b471abfed0f95a6847eb88afaa.png" width="382" height="224" class="img_ev3q"></p>
<p>We can update our model to make use of Optional, as shown in Listing 2:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Computer</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token class-name">Optional</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Soundcard</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> soundcard</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token class-name">Optional</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Soundcard</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getSoundcard</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Soundcard</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token class-name">Optional</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics">USB</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> usb</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token class-name">Optional</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics">USB</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getUSB</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">USB</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getVersion</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The code above immediately shows that a computer might or might not have a sound card (the sound card is optional). In
addition, a sound card can optionally have a USB port. This is an improvement, because this new model can now reflect
clearly whether a given value is allowed to be missing.</p>
<p>But what can you actually do with an <code>Optional&lt;Soundcard&gt;</code> object? After all, you want to get to the USB port's version
number. In a nutshell, the <code>Optional</code> class includes methods to explicitly deal with the cases where a value is present
or absent. However, the advantage compared to null references is that the <code>Optional</code> class forces us to think about the
case when the value is not present. As a consequence, we can prevent unintended null pointer exceptions.</p>
<p>It is important to note that the intention of the <code>Optional</code> class is not to replace every single null reference.
Instead, its purpose is to help design more-comprehensible APIs so that by just reading the signature of a method, you
can tell whether you can expect an optional value. This forces you to actively unwrap an <code>Optional</code> to deal with the
absence of a value.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="using-optional">Using Optional<a href="https://qubitpi.github.io/jersey-webservice-template/blog/java-optional#using-optional" class="hash-link" aria-label="Direct link to Using Optional" title="Direct link to Using Optional">​</a></h2>
<p>The Groovy code above can be written with Optional in Java as</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">String</span><span class="token plain"> name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> computer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">flatMap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Computer</span><span class="token operator" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">getSoundcard</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">flatMap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Soundcard</span><span class="token operator" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">getUSB</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">USB</span><span class="token operator" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">getVersion</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">orElse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"UNKNOWN"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="creating-optional-objects">Creating Optional Objects<a href="https://qubitpi.github.io/jersey-webservice-template/blog/java-optional#creating-optional-objects" class="hash-link" aria-label="Direct link to Creating Optional Objects" title="Direct link to Creating Optional Objects">​</a></h3>
<p>First, how do you create Optional objects? There are several ways:</p>
<p>Here is an empty Optional:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">Optional</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Soundcard</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> sc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Optional</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">empty</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And here is an <code>Optional</code> with a non-null value:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">Optional</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Soundcard</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> sc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Optional</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">of</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Soundcard</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In the case above, if soundcard were null, a NullPointerException would be immediately thrown (rather than getting a
latent error once you try to access properties of the soundcard)</p>
<p>By using <strong>ofNullable</strong>, however, you can create an Optional object that may hold a null value:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">Optional</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Soundcard</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> sc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Optional</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ofNullable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">soundcard</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If soundcard were null, the resulting <code>Optional</code> object would be empty.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="do-something-if-a-value-is-present">Do Something If a Value Is Present<a href="https://qubitpi.github.io/jersey-webservice-template/blog/java-optional#do-something-if-a-value-is-present" class="hash-link" aria-label="Direct link to Do Something If a Value Is Present" title="Direct link to Do Something If a Value Is Present">​</a></h3>
<p>Now that you have an Optional object, you can access the methods available to explicitly deal with the presence or
absence of values. Instead of having to remember to do a null check, as follows:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">SoundCard</span><span class="token plain"> soundcard </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">if</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">soundcard </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">soundcard</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You can use the <strong>ifPresent()</strong> method, as follows:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">Optional</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Soundcard</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> soundcard </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">soundcard</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ifPresent</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token operator" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You no longer need to do an explicit null check; it is enforced by the type system. If the Optional object were empty,
nothing would be printed.</p>
<p>You can also use the <strong>isPresent()</strong> method to find out whether a value is present in an Optional object. In addition,
there's a <strong>get()</strong> method that returns the value contained in the Optional object, if it is present. <em>Otherwise,
it throws a NoSuchElementException</em>. The two methods can be combined, as follows, to prevent exceptions:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">if</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">soundcard</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">isPresent</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">soundcard</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>However, this is not the recommended use of Optional because it's not much of an improvement over nested null checks,
and there are more idiomatic alternatives, which we explore below.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="default-values-and-actions">Default Values and Actions<a href="https://qubitpi.github.io/jersey-webservice-template/blog/java-optional#default-values-and-actions" class="hash-link" aria-label="Direct link to Default Values and Actions" title="Direct link to Default Values and Actions">​</a></h3>
<p>A typical pattern is to return a default value if you determine that the result of an operation is null. In general,
you can use the ternary operator, as follows, to achieve this:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">Soundcard</span><span class="token plain"> soundcard </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> maybeSoundcard </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> maybeSoundcard </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Soundcard</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"basic_sound_card"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Using an Optional object, you can rewrite this code by using the <strong>orElse()</strong> method, which provides a default value if
Optional is empty:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">Soundcard</span><span class="token plain"> soundcard </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> maybeSoundcard</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">orElse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Soundcard</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"defaut"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Similarly, you can use the <strong>orElseThrow()</strong> method, which instead of providing a default value if Optional is empty,
throws an exception:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">Soundcard</span><span class="token plain"> soundcard </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> maybeSoundCard</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">orElseThrow</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">IllegalStateException</span><span class="token operator" style="color:#393A34">::</span><span class="token keyword" style="color:#00009f">new</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="rejecting-certain-values-using-the-filter-method">Rejecting Certain Values Using the filter Method<a href="https://qubitpi.github.io/jersey-webservice-template/blog/java-optional#rejecting-certain-values-using-the-filter-method" class="hash-link" aria-label="Direct link to Rejecting Certain Values Using the filter Method" title="Direct link to Rejecting Certain Values Using the filter Method">​</a></h3>
<p>Often you need to call a method on an object and check some property. For example, you might need to check whether the
USB port is a particular version. To do this in a safe way, you first need to check whether the reference pointing to a
USB object is null and then call the <code>getVersion()</code> method, as follows:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">USB</span><span class="token plain"> usb </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">if</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">usb </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"3.0"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">equals</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">usb</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getVersion</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"ok"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This pattern can be rewritten using the <strong>filter</strong> method on an Optional object, as follows:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">Optional</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics">USB</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> maybeUSB </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">maybeUSB</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">filter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">usb </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"3.0"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">equals</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">usb</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getVersion</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ifPresent</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"ok"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <code>filter</code> method takes a predicate as an argument. If a value is present in the <code>Optional</code> object and it matches the
predicate, the filter method returns that value; otherwise, it returns an empty <code>Optional</code> object.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="extracting-and-transforming-values-using-the-map-method">Extracting and Transforming Values Using the map Method<a href="https://qubitpi.github.io/jersey-webservice-template/blog/java-optional#extracting-and-transforming-values-using-the-map-method" class="hash-link" aria-label="Direct link to Extracting and Transforming Values Using the map Method" title="Direct link to Extracting and Transforming Values Using the map Method">​</a></h3>
<p>Another common pattern is to extract information from an object. For example, from a <code>Soundcard</code> object, you might want
to extract the USB object and then further check whether it is of the correct version. You would typically write the
following code:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">if</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">soundcard </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">USB</span><span class="token plain"> usb </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> soundcard</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getUSB</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">usb </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"3.0"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">equals</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">usb</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getVersion</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"ok"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can rewrite this pattern of "checking for null and extracting" (here, the <code>Soundcard</code> object) using the map method.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">Optional</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics">USB</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> usb </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> maybeSoundcard</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Soundcard</span><span class="token operator" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">getUSB</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There's a direct parallel to the <code>map</code> method used with streams. There, you pass a function to the <code>map</code> method, which
applies this function to each element of a stream. However, nothing happens if the stream is empty. The <code>map</code> method of
the <code>Optional</code> class does exactly the same: the value contained inside <code>Optional</code> is "transformed" by the function
passed as an argument (here, a method reference to extract the USB port), while nothing happens if <code>Optional</code> is empty.</p>
<p>Finally, we can combine the <code>map</code> method with the <code>filter</code> method to reject a USB port whose version is different than
3.0:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">maybeSoundcard</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Soundcard</span><span class="token operator" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">getUSB</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">filter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">usb </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"3.0"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">equals</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">usb</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getVersion</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ifPresent</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"ok"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cascading-optional-objects-using-the-flatmap-method">Cascading Optional Objects Using the flatMap Method<a href="https://qubitpi.github.io/jersey-webservice-template/blog/java-optional#cascading-optional-objects-using-the-flatmap-method" class="hash-link" aria-label="Direct link to Cascading Optional Objects Using the flatMap Method" title="Direct link to Cascading Optional Objects Using the flatMap Method">​</a></h3>
<p>We've seen a few patterns that can be refactored to use Optional. So how can we write the following code in a safe way?</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">String</span><span class="token plain"> version </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> computer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getSoundcard</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getUSB</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getVersion</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Notice that all this code does is extract one object from another one, which is exactly what the map method is for.
Earlier in the article, we changed our model so a Computer has an <code>Optional&lt;Soundcard&gt;</code> and a Soundcard has an
<code>Optional&lt;USB&gt;</code>, so we should be able to write the following:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">String</span><span class="token plain"> version </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> computer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Computer</span><span class="token operator" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">getSoundcard</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Soundcard</span><span class="token operator" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">getUSB</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">USB</span><span class="token operator" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">getVersion</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">orElse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"UNKNOWN"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Unfortunately, this code doesn't compile. Why? The variable computer is of type <code>Optional&lt;Computer&gt;</code>, so it is
perfectly correct to call the <code>map</code> method. However, <code>getSoundcard()</code> returns an object of type <code>Optional&lt;Soundcard&gt;</code>.
This means the result of the <code>map</code> operation is an object of type <code>Optional&lt;Optional&lt;Soundcard&gt;&gt;</code>. As a result, the
call to <code>getUSB()</code> is invalid because the outermost Optional contains as its value another Optional, which of course
doesn't support the <code>getUSB()</code> method</p>
<p>So how can we solve this problem? Again, we can look at a pattern you might have used previously with streams: the
<strong>flatMap</strong> method. With streams, the <code>flatMap</code> method takes a function as an argument, which returns another stream.
This function is applied to each element of a stream, which would result in a stream of streams. However, <code>flatMap</code> has
the effect of replacing each generated stream by the contents of that stream. In other words, all the separate streams
that are generated by the function get amalgamated or "flattened" into one single stream. What we want here is
something similar, but we want to "flatten" a two-level Optional into one.</p>
<p>Well, here's good news: <code>Optional</code> also supports a <code>flatMap</code> method. Its purpose is to apply the transformation
function on the value of an <code>Optional</code> and then flatten the resulting two-level Optional into a single one.</p>
<p>So, to make our code correct, we need to rewrite it as follows using <code>flatMap</code>:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">String</span><span class="token plain"> version </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> computer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">flatMap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Computer</span><span class="token operator" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">getSoundcard</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">flatMap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Soundcard</span><span class="token operator" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">getUSB</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">USB</span><span class="token operator" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">getVersion</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">orElse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"UNKNOWN"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The first flatMap ensures that an <code>Optional&lt;Soundcard&gt;</code> is returned instead of an <code>Optional&lt;Optional&lt;Soundcard&gt;&gt;</code>, and
the second flatMap achieves the same purpose to return an <code>Optional&lt;USB&gt;</code>. Note that the third call just needs to be a
map() because getVersion() returns a String rather than an <code>Optional</code> object.</p>]]></content:encoded>
            <category>Java</category>
        </item>
        <item>
            <title><![CDATA[(RestAssured) Match JSON Ignoring Order]]></title>
            <link>https://qubitpi.github.io/jersey-webservice-template/blog/restassured-json</link>
            <guid>https://qubitpi.github.io/jersey-webservice-template/blog/restassured-json</guid>
            <pubDate>Sun, 19 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Use RestAssured's JsonPath to parse the JSON file into a Map and then compare it with Hamcrest Matchers. This way the]]></description>
            <content:encoded><![CDATA[<p>Use RestAssured's JsonPath to parse the JSON file into a Map and then compare it with Hamcrest Matchers. This way the
order didn't matter.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token import static namespace" style="opacity:0.7">org</span><span class="token import static namespace punctuation" style="opacity:0.7;color:#393A34">.</span><span class="token import static namespace" style="opacity:0.7">hamcrest</span><span class="token import static namespace punctuation" style="opacity:0.7;color:#393A34">.</span><span class="token import static class-name">Matchers</span><span class="token import static punctuation" style="color:#393A34">.</span><span class="token import static">equalTo</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token import namespace" style="opacity:0.7">io</span><span class="token import namespace punctuation" style="opacity:0.7;color:#393A34">.</span><span class="token import namespace" style="opacity:0.7">restassured</span><span class="token import namespace punctuation" style="opacity:0.7;color:#393A34">.</span><span class="token import namespace" style="opacity:0.7">path</span><span class="token import namespace punctuation" style="opacity:0.7;color:#393A34">.</span><span class="token import namespace" style="opacity:0.7">json</span><span class="token import namespace punctuation" style="opacity:0.7;color:#393A34">.</span><span class="token import class-name">JsonPath</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">JsonPath</span><span class="token plain"> expectedJson </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">JsonPath</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">File</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/path/to/expected.json"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">given</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">then</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">body</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">equalTo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">expectedJson</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getMap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>Java</category>
            <category>Testing</category>
        </item>
        <item>
            <title><![CDATA[Provider v.s. @Provider]]></title>
            <link>https://qubitpi.github.io/jersey-webservice-template/blog/provider</link>
            <guid>https://qubitpi.github.io/jersey-webservice-template/blog/provider</guid>
            <pubDate>Sat, 18 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[A Provider is an interface defined in JSR 330. It is part of the general dependency]]></description>
            <content:encoded><![CDATA[<p>A <strong>Provider</strong> is an interface defined in <a href="https://qubitpi.github.io/javax-inject/api/javax/inject/Provider.html" target="_blank" rel="noopener noreferrer">JSR 330</a>. It is part of the <em>general</em> dependency
injection concept in Java.</p>
<p>Whether we are on Java SR or EE, Provider will always be loadable from classpath. For example, the <a href="https://qubitpi.github.io/glassfish-hk2/" target="_blank" rel="noopener noreferrer">HK2</a> is an
implementation of JSR-330 in a JavaSE environment and it conforms to the JSR 330 standard by loading the
<a href="https://qubitpi.github.io/javax-inject/api/javax/inject/Provider.html" target="_blank" rel="noopener noreferrer">Provider</a> in its implementations.</p>
<p><strong>@Provider</strong>, on the other hand, is a
<a href="https://github.com/jakartaee/rest/blob/master/jaxrs-api/src/main/java/jakarta/ws/rs/ext/Provider.java" target="_blank" rel="noopener noreferrer"><em>Java EE/Jakarta EE concept</em></a>.
If we are developing Java EE applications, we can use both (<code>Provider</code> &amp; <code>@Provider</code>) at the same time.</p>]]></content:encoded>
            <category>Java</category>
        </item>
        <item>
            <title><![CDATA[Refer to Environment Variables in POM]]></title>
            <link>https://qubitpi.github.io/jersey-webservice-template/blog/env-var-in-pom</link>
            <guid>https://qubitpi.github.io/jersey-webservice-template/blog/env-var-in-pom</guid>
            <pubDate>Fri, 23 Aug 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[Environment Variables]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="environment-variables">Environment Variables<a href="https://qubitpi.github.io/jersey-webservice-template/blog/env-var-in-pom#environment-variables" class="hash-link" aria-label="Direct link to Environment Variables" title="Direct link to Environment Variables">​</a></h2>
<p>To refer to environment variables from the pom.xml, we can use the <code>${env.VARIABLE_NAME}</code> syntax.</p>
<p>For instance, let's use it to externalize the Java version in the build process:</p>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">build</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">plugins</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">plugin</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">groupId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">org.apache.maven.plugins</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">groupId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">artifactId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">maven-compiler-plugin</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">artifactId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">version</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">3.8.1</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">version</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">configuration</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">source</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">${env.JAVA_VERSION}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">source</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">target</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">${env.JAVA_VERSION}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">target</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">configuration</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">plugin</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">plugins</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">build</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We should remember to pass the Java version information via environment variables. If we fail to do so, then we won't be
able to build the project.</p>
<p>To run the Maven goals or phases against such a build file, we should first export the environment variable. For
instance</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">JAVA_VERSION</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">17</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mvn clean package</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In order to provide a default when the <code>JAVA_VERSION</code> environment variable is missing we can use a Maven profile:</p>
<div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">profiles</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">profile</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">id</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">default-java</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">id</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">activation</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">property</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">name</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">!env.JAVA_VERSION</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">name</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">property</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">activation</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">build</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">plugins</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">plugin</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">groupId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">org.apache.maven.plugins</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">groupId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">artifactId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">maven-compiler-plugin</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">artifactId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">version</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">3.8.1</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">version</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">configuration</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">source</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">1.8</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">source</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">target</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">1.8</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">target</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">configuration</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">plugin</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">plugins</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">build</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">profile</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">profiles</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As shown above, we're creating a profile and making it active only if the <code>JAVA_VERSION</code> environment variable is missing
(<code>!env.JAVA_VERSION</code> part). If that happens, then this new plugin definition will override the existing one.</p>]]></content:encoded>
            <category>Java</category>
            <category>Maven</category>
        </item>
        <item>
            <title><![CDATA[Java System Properties & Environment Variables API's]]></title>
            <link>https://qubitpi.github.io/jersey-webservice-template/blog/java-env-properties</link>
            <guid>https://qubitpi.github.io/jersey-webservice-template/blog/java-env-properties</guid>
            <pubDate>Wed, 07 Aug 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[System Properties]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="system-properties">System Properties<a href="https://qubitpi.github.io/jersey-webservice-template/blog/java-env-properties#system-properties" class="hash-link" aria-label="Direct link to System Properties" title="Direct link to System Properties">​</a></h2>
<p>The Java platform uses a <strong>Properties</strong> object to provide information about the local system and configuration, and we
call it <strong>System Properties</strong>.</p>
<p>System Properties include information such as the current user, the current version of the Java runtime, and the file
path-name separator.</p>
<p>In the below code, we use <code>System.getProperty("log_dir")</code> to read the value of the property <code>log_dir</code>. We also make use
of the default value parameter, so if the property doesn't exist, getProperty returns <code>/tmp/log</code>:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">String</span><span class="token plain"> log_dir </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getProperty</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"log_dir"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token string" style="color:#e3116c">"/tmp/log"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To update System Properties at runtime, we use the <strong>System.setProperty</strong> method:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setProperty</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"log_dir"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/tmp/log"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can pass our own properties or configurations values to the application using the <strong>propertyName</strong> command line
argument:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">java </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">jar jarName </span><span class="token operator" style="color:#393A34">-</span><span class="token class-name">DpropertyName</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">value</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>For example</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">java </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">jar app </span><span class="token operator" style="color:#393A34">-</span><span class="token class-name">Dfoo</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"bar"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="environment-variables">Environment Variables<a href="https://qubitpi.github.io/jersey-webservice-template/blog/java-env-properties#environment-variables" class="hash-link" aria-label="Direct link to Environment Variables" title="Direct link to Environment Variables">​</a></h2>
<p>Environment Variables are key/value pairs like Properties. Many Operating Systems use Environment Variables to allow
<em>configuration information to be passed into applications</em>.</p>
<p>The way to set an environment variable differs from one operating system to another. For example, on Linux, we use</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">MY_ENV_VAR</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">foo</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><em>When creating a process, it inherits a clone environment of its parent process by default</em>.</p>
<p>To obtain a single environment variable programmatically, we can call <strong>getenv</strong> with the variable name:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">String</span><span class="token plain"> log_dir </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getenv</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"log_dir"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-caution admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_BuS1"><p>getenv() returns a <em>read-only</em> Map. Trying to add values to the map throws an UnsupportedOperationException.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-differences">The Differences<a href="https://qubitpi.github.io/jersey-webservice-template/blog/java-env-properties#the-differences" class="hash-link" aria-label="Direct link to The Differences" title="Direct link to The Differences">​</a></h2>
<p>Although both are essentially maps that provide String values for String keys, let's look at a few differences:</p>
<ol>
<li>We can update Properties at runtime, while Environment Variables are an immutable copy of the Operating System's
variables.</li>
<li>Properties are contained only within the Java platform, while Environment Variables are global at the Operating
System level, available to all applications running on the same machine.</li>
<li>Properties must exist when packaging the application, but we can create Environment Variables on the Operating
System at almost any point.</li>
</ol>]]></content:encoded>
            <category>Java</category>
        </item>
    </channel>
</rss>