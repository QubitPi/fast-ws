"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3595],{1317:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=t(4848),r=t(8453);const a={sidebar_position:2,title:"Elide Standalone"},s=void 0,o={id:"elide/elide-standalone",title:"Elide Standalone",description:"Running Elide standalone is pretty straight forward by essentially implementing a Binder and a ResourceConfig:",source:"@site/docs/elide/elide-standalone.md",sourceDirName:"elide",slug:"/elide/elide-standalone",permalink:"/jersey-webservice-template/docs/elide/elide-standalone",draft:!1,unlisted:!1,editUrl:"https://github.com/QubitPi/jersey-webservice-template/tree/master/docs/docs/elide/elide-standalone.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Elide Standalone"},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/jersey-webservice-template/docs/elide/intro"},next:{title:"Features",permalink:"/jersey-webservice-template/docs/elide/features"}},l={},c=[];function d(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Running Elide standalone is pretty straight forward by essentially implementing a ",(0,i.jsx)(n.strong,{children:"Binder"})," and a ",(0,i.jsx)(n.strong,{children:"ResourceConfig"}),":"]}),"\n",(0,i.jsxs)(n.p,{children:["In addition, a working example is ",(0,i.jsx)(n.a,{href:"https://github.com/QubitPi/elide-standalone-example",children:"here"})]}),"\n",(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"hibernate.hbm2ddl.auto"})," in this example is set to ",(0,i.jsx)(n.code,{children:"create"}),", which means each run of the standalone will erase the\ndatabase and re-create tables. Please do change this value if used in production"]})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/QubitPi/jersey-webservice-template/pull/29/files",children:"In order for dependency injection to work properly in Elide standalone"}),",\nwe must use ",(0,i.jsx)(n.a,{href:"https://eclipse-ee4j.github.io/jersey.github.io/documentation/latest/ioc.html#d0e17933",children:"Jersey binder"}),",\nnot ",(0,i.jsx)(n.a,{href:"https://javaee.github.io/hk2/",children:"HK binder"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'\nimport org.glassfish.jersey.internal.inject.AbstractBinder;\nimport org.glassfish.jersey.internal.inject.Binder;\n\n/**\n * A binder factory builds a custom binder for the Jersey application.\n * <p>\n * The factory makes the component object instance that will eventually be passed to\n * {@link org.glassfish.jersey.server.ResourceConfig#register(Object)}.\n */\n@Immutable\n@ThreadSafe\npublic class BinderFactory {\n\n    /**\n     * Builds a hk2 Binder instance.\n     * <p>\n     * This binder should bind all relevant resources for runtime dependency injection.\n     *\n     * @param injector  A standard HK2 service locator\n     *\n     * @return a binder instance that will be registered by putting as a parameter to\n     * {@link org.glassfish.jersey.server.ResourceConfig#register(Object)}\n     */\n    @NotNull\n    public Binder buildBinder(final ServiceLocator injector) {\n        return new AbstractBinder() {\n\n            private static final Consumer<EntityManager> TXCANCEL = em -> em.unwrap(Session.class).cancelQuery();\n\n            private final ClassScanner classScanner = new DefaultClassScanner();\n\n            @Override\n            protected void configure() {\n                final ElideSettings elideSettings = buildElideSettings();\n\n                bind(buildElide(elideSettings)).to(Elide.class).named("elide");\n                bind(elideSettings).to(ElideSettings.class);\n                bind(elideSettings.getDictionary()).to(EntityDictionary.class);\n                bind(elideSettings.getDataStore()).to(DataStore.class).named("elideDataStore");\n            }\n\n            /**\n             * Initializes Elide middleware service.\n             *\n             * @param elideSettings  An object for configuring various aspect of the Elide middleware\n             *\n             * @return a new instance\n             */\n            @NotNull\n            private Elide buildElide(@NotNull final ElideSettings elideSettings) {\n                return new Elide(\n                        elideSettings,\n                        new TransactionRegistry(),\n                        elideSettings.getDictionary().getScanner(),\n                        false\n                );\n            }\n\n            /**\n             * Initializes Elide config object.\n             *\n             * @return a new instance\n             */\n            @NotNull\n            private ElideSettings buildElideSettings() {\n                return new ElideSettingsBuilder(buildDataStore(buildEntityManagerFactory()))\n                        .withEntityDictionary(buildEntityDictionary(injector))\n                        .build();\n            }\n\n            /**\n             * Initializes the Elide {@link DataStore} service with the specified {@link EntityManagerFactory}.\n             *\n             * @param entityManagerFactory  An object used to initialize JPA\n             *\n             * @return a new instance\n             */\n            @NotNull\n            private DataStore buildDataStore(@NotNull final EntityManagerFactory entityManagerFactory) {\n                return new JpaDataStore(\n                        entityManagerFactory::createEntityManager,\n                        em -> new NonJtaTransaction(em, TXCANCEL),\n                        entityManagerFactory::getMetamodel\n                );\n            }\n\n            /**\n             * Initializes the {@link EntityManagerFactory} service used by Elide JPA.\n             *\n             * @return a new instance\n             */\n            @NotNull\n            private EntityManagerFactory buildEntityManagerFactory() {\n                final String modelPackageName = "com.mycompany.mymodel";\n\n                final ClassLoader classLoader = null;\n\n                final PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\n                        "my-webservice",\n                        getAllEntities(classScanner, modelPackageName),\n                        getDefaultDbConfigs(),\n                        classLoader\n                );\n\n                return new EntityManagerFactoryBuilderImpl(\n                        new PersistenceUnitInfoDescriptor(persistenceUnitInfo),\n                        new HashMap<>(),\n                        classLoader\n                ).build();\n            }\n\n            /**\n             * Get all the entities in a package.\n             *\n             * @param scanner  An object that picks up entities by Elide annotation\n             * @param packageName  A fully qualified package name under which contains all entities\n             *\n             * @return all entities found in the provided package.\n             */\n            @NotNull\n            public static List<String> getAllEntities(\n                    @NotNull final ClassScanner scanner,\n                    @NotNull final String packageName\n            ) {\n                return scanner.getAnnotatedClasses(packageName, Entity.class).stream()\n                        .map(Class::getName)\n                        .collect(Collectors.toList());\n            }\n\n            /**\n             * Returns a collection of DB configurations, including connecting credentials.\n             * <p>\n             * In addition, the configurations consumes all configs defined in {@link JpaDatastoreConfig}\n             *\n             * @return a new instance\n             */\n            @NotNull\n            @SuppressWarnings("MultipleStringLiterals")\n            private static Properties getDefaultDbConfigs() {\n                final Properties dbProperties = new Properties();\n\n                dbProperties.put("hibernate.show_sql", "true");\n                dbProperties.put("hibernate.hbm2ddl.auto", "create");\n                dbProperties.put("hibernate.dialect", "org.hibernate.dialect.MySQLDialect");\n                dbProperties.put("hibernate.current_session_context_class", "thread");\n                dbProperties.put("hibernate.jdbc.use_scrollable_resultset", "true");\n\n                // Collection Proxy & JDBC Batching\n                dbProperties.put("hibernate.jdbc.batch_size", "50");\n                dbProperties.put("hibernate.jdbc.fetch_size", "50");\n                dbProperties.put("hibernate.default_batch_fetch_size", "100");\n\n                // Hikari Connection Pool Settings\n                dbProperties.putIfAbsent("hibernate.connection.provider_class",\n                        "com.zaxxer.hikari.hibernate.HikariConnectionProvider");\n                dbProperties.putIfAbsent("hibernate.hikari.connectionTimeout", "20000");\n                dbProperties.putIfAbsent("hibernate.hikari.maximumPoolSize", "30");\n                dbProperties.putIfAbsent("hibernate.hikari.idleTimeout", "30000");\n\n                dbProperties.put("jakarta.persistence.jdbc.driver", "com.mysql.cj.jdbc.Driver");\n                dbProperties.put("jakarta.persistence.jdbc.url", "jdbc:mysql://db/minerva?serverTimezone=UTC");\n                dbProperties.put("jakarta.persistence.jdbc.user", "root");\n                dbProperties.put("jakarta.persistence.jdbc.password", "root");\n\n                return dbProperties;\n            }\n\n            /**\n             * Initializes the Elide {@link EntityDictionary} service with a given dependency injector.\n             *\n             * @param injector  A standard HK2 service locator used by Elide\n             *\n             * @return a new instance\n             */\n            @NotNull\n            private EntityDictionary buildEntityDictionary(@NotNull final ServiceLocator injector) {\n                return new EntityDictionary(\n                        new HashMap<>(),\n                        new HashMap<>(),\n                        new Injector() {\n                            @Override\n                            public void inject(final Object entity) {\n                                injector.inject(entity);\n                            }\n\n                            @Override\n                            public <T> T instantiate(final Class<T> cls) {\n                                return injector.create(cls);\n                            }\n                        },\n                        CoerceUtil::lookup,\n                        new HashSet<>(),\n                        classScanner\n                );\n            }\n        };\n    }\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'/**\n * The resource configuration for the web applications.\n */\n@Immutable\n@ThreadSafe\n@ApplicationPath("/v1/data/")\npublic class ResourceConfig extends org.glassfish.jersey.server.ResourceConfig {\n\n    private static final String GRAPHQL_ENDPOINT_PACKAGE = "com.paiondata.elide.graphql";\n    private static final String JAON_API_ENDPOINT_PACKAGE = "com.paiondata.elide.jsonapi.resources";\n\n    /**\n     * DI Constructor.\n     *\n     * @param injector  A standard HK2 service locator\n     */\n    @Inject\n    public ResourceConfig(@NotNull final ServiceLocator injector) {\n        this(injector, new BinderFactory());\n    }\n\n    /**\n     * Constructor that allows for finer dependency injection control.\n     *\n     * @param injector  A standard HK2 service locator\n     * @param binderFactory  An object that produces resource binder\n     */\n    private ResourceConfig(@NotNull final ServiceLocator injector, @NotNull final BinderFactory binderFactory) {\n        packages(JAON_API_ENDPOINT_PACKAGE, GRAPHQL_ENDPOINT_PACKAGE);\n\n        register(binderFactory.buildBinder(injector));\n\n        // Bind api docs to given endpoint\n        // This looks strange, but Jersey binds its Abstract binders first, and then later it binds \'external\'\n        // binders (like this HK2 version). This allows breaking dependency injection into two phases.\n        // Everything bound in the first phase can be accessed in the second phase.\n        register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n            @Override\n            protected void configure() {\n                injector.getService(Elide.class, "elide").doScans();\n            }\n        });\n    }\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(6540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);