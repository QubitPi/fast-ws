"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[618],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7857:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:3,title:"Development"},o=void 0,l={unversionedId:"development",id:"development",title:"Development",description:"Running Tests",source:"@site/docs/development.md",sourceDirName:".",slug:"/development",permalink:"/jersey-webservice-template/docs/development",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/development.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Development"},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/jersey-webservice-template/docs/setup"},next:{title:"JPA through Elide Middleware",permalink:"/jersey-webservice-template/docs/elide"}},s={},p=[{value:"Running Tests",id:"running-tests",level:2},{value:"Packaging",id:"packaging",level:2},{value:"Running Webservice in Docker (Local Dev &amp; Testing ONLY)",id:"running-webservice-in-docker-local-dev--testing-only",level:2},{value:"Getting the Image",id:"getting-the-image",level:3},{value:"Docker Hub",id:"docker-hub",level:4},{value:"GitHub",id:"github",level:4},{value:"Standing up a Container",id:"standing-up-a-container",level:3},{value:"Running Webservice in Standalone Jetty (Production)",id:"running-webservice-in-standalone-jetty-production",level:2},{value:"Download Jetty",id:"download-jetty",level:3},{value:"Setting Up Standalone Jetty",id:"setting-up-standalone-jetty",level:3},{value:"Running Webservice",id:"running-webservice",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...i}=e;return(0,r.kt)(u,(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"running-tests"},"Running Tests"),(0,r.kt)("p",null,"The following commands runs both unit and integration tests"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mvn clean verify\n")),(0,r.kt)("p",null,"For IT tests, we use ",(0,r.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/testcontainers-java/"},"Testcontainers")," instead of ",(0,r.kt)("a",{parentName:"p",href:"https://mysql.jcabi.com/"},"jcabi-mysql")," because the latter is hard to configure and debug and\n",(0,r.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/testcontainers-java/"},"Testcontainers")," support more types of db, such as mongo"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If tests fail with 404 or endpoint-not-working, make sure the port 8080 is not occupied all integration tests runs\nagainst webservice running at that port.")),(0,r.kt)("h2",{id:"packaging"},"Packaging"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mvn clean package\n")),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/WAR_(file_format)"},"WAR file")," named ",(0,r.kt)("strong",{parentName:"p"},"jersey-webservice-template-1.0-SNAPSHOT.war")," will\nbe generated under ",(0,r.kt)("em",{parentName:"p"},"target")," directory for ",(0,r.kt)("a",{parentName:"p",href:"#running-in-standalone-jetty"},"running in Jetty")),(0,r.kt)("h2",{id:"running-webservice-in-docker-local-dev--testing-only"},"Running Webservice in Docker (Local Dev & Testing ONLY)"),(0,r.kt)("p",null,"This ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/jersey-webservice-template/blob/master/Dockerfile"},"Docker")," image can be used for"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"decoupling frontend and backend developments, and"),(0,r.kt)("li",{parentName:"ol"},"making it easy to run E2E testing of application backed by Jersey Webservice Template in CI/CD")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Docker designed here is intended for local development and testing purposes ONLY! ",(0,r.kt)("em",{parentName:"p"},"It is strongly discouraged\nto run this Docker container in production!"))),(0,r.kt)("h3",{id:"getting-the-image"},"Getting the Image"),(0,r.kt)("p",null,"We can obtain the image in one of the 2 approaches below:"),(0,r.kt)("h4",{id:"docker-hub"},"Docker Hub"),(0,r.kt)("p",null,"We can pull the image from ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/jack20191124/jersey-webservice-template/"},"my docker hub"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull jack20191124/jersey-webservice-template\n")),(0,r.kt)("h4",{id:"github"},"GitHub"),(0,r.kt)("p",null,"We could also build the image from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/jersey-webservice-template/blob/master/Dockerfile"},"source"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/QubitPi/jersey-webservice-template.git\ncd jersey-webservice-template\nmvn clean package\ndocker build -t jack20191124/jersey-webservice-template .\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"mvn clean package")," requires JDK 17 which can be setup with ",(0,r.kt)("a",{parentName:"li",href:"setup"},"instructions here")),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"jack20191124/jersey-webservice-template")," in the last command is the image name; we could replace that value with\nanything preferred"))),(0,r.kt)("h3",{id:"standing-up-a-container"},"Standing up a Container"),(0,r.kt)("p",null,"When image is built, we can spin up an instance with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --name=jersey-webservice-template -it -p 8080:8080 jack20191124/jersey-webservice-template\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"name=jersey-webservice-template"),': the container is named "jersey-webservice-template". We can change it\naccordingly.'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"-p 8080:8080"),": 8080 is the port where webservice will listen on. With this port forwarding, we will be able to\naccess webservice from host machine web browser at ",(0,r.kt)("inlineCode",{parentName:"li"},"localhost:8080"))),(0,r.kt)("p",null,"If we see the following output, it means the container is running properly and ready to accept request such as\n",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8080/v1/data/healthcheck")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"...\n\n2023-10-24 05:21:46.032:INFO :oejss.DefaultSessionIdManager:main: Session workerName=node0\n2023-10-24 05:21:46.977:INFO :oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@2892dae4{ROOT.war,/,file:///tmp/jetty-0_0_0_0-8080-ROOT_war-_-any-13760845903749066689/webapp/,AVAILABLE}{/jetty-base/webapps/ROOT.war}\n2023-10-24 05:21:46.994:INFO :oejs.AbstractConnector:main: Started ServerConnector@5c8dfc08{HTTP/1.1, (http/1.1)}{0.0.0.0:8080}\n2023-10-24 05:21:47.009:INFO :oejs.Server:main: Started Server@71d44a3{STARTING}[11.0.15,sto=5000] @2947ms\n")),(0,r.kt)("h2",{id:"running-webservice-in-standalone-jetty-production"},"Running Webservice in Standalone Jetty (Production)"),(0,r.kt)("h3",{id:"download-jetty"},"Download Jetty"),(0,r.kt)("p",null,"For JDK ",(0,r.kt)("strong",{parentName:"p"},"17"),", which is the version JWT runs on, it's been tested that Jetty ",(0,r.kt)("em",{parentName:"p"},"11.0.15")," worked. Hence, we will use\n",(0,r.kt)("a",{parentName:"p",href:"https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-home/11.0.15/jetty-home-11.0.15.tar.gz"},'"11.0.15" release')," as\nan example:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Error loading download-jetty.png",src:n(8662).Z,width:"3584",height:"1878"})),(0,r.kt)("p",null,"Put the ",(0,r.kt)("inlineCode",{parentName:"p"},"tar.gz")," file into a location of your choice as the installation path and extract the Jetty binary using"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tar -xzvf jetty-home-11.0.15.tar.gz\n")),(0,r.kt)("p",null,"The extracted directory ",(0,r.kt)("em",{parentName:"p"},"jetty-home-11.0.15")," is the Jetty distribution. We call this directory ",(0,r.kt)("strong",{parentName:"p"},"$JETTY_HOME"),", which\nshould not be modified."),(0,r.kt)("h3",{id:"setting-up-standalone-jetty"},"Setting Up Standalone Jetty"),(0,r.kt)("p",null,"Our ",(0,r.kt)("a",{parentName:"p",href:"#packaging"},"WAR file")," will be dropped to a directory where Jetty can pick up and run. We call this directory\n",(0,r.kt)("strong",{parentName:"p"},"$JETTY_BASE"),", which is usually different from the ",(0,r.kt)("em",{parentName:"p"},"$JETTY_HOME"),". The ",(0,r.kt)("em",{parentName:"p"},"$JETTY_BASE")," also contains container runtime\nconfigs. In short, the Standalone Jetty container will be setup with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export JETTY_HOME=/path/to/jetty-home-11.0.15\nmkdir -p /path/to/jetty-base\ncd /path/to/jetty-base\njava -jar $JETTY_HOME/start.jar --add-module=annotations,server,http,deploy,servlet,webapp,resources,jsp\n")),(0,r.kt)("p",null,"where ",(0,r.kt)("inlineCode",{parentName:"p"},"/path/to/")," is the ",(0,r.kt)("em",{parentName:"p"},"absolute")," path to the directory containing the ",(0,r.kt)("inlineCode",{parentName:"p"},"jetty-home-11.0.15")," directory"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--add-module=annotations,server,http,deploy,servlet,webapp,resources,jsp")," is how we configure the Jetty\ncontainer."),(0,r.kt)("p",null,"Lastly, drop the ",(0,r.kt)("a",{parentName:"p",href:"#packaging"},"WAR file")," into ",(0,r.kt)("strong",{parentName:"p"},"/path/to/jetty-base/webapps")," directory and rename the WAR file to\n",(0,r.kt)("strong",{parentName:"p"},"ROOT.war"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mv /path/to/war-file /path/to/jetty-base/webapps/ROOT.war\n")),(0,r.kt)("h3",{id:"running-webservice"},"Running Webservice"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"java -jar $JETTY_HOME/start.jar\n")),(0,r.kt)("p",null,"The webservice will run on port ",(0,r.kt)("strong",{parentName:"p"},"8080"),", and you will see the data you inserted"))}d.isMDXComponent=!0},8662:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/download-jetty-edc103f9f296011d2a6f18b625bff490.png"}}]);