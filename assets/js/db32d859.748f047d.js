"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[653],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,k=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(k,i(i({ref:t},p),{},{components:n})):r.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7215:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:6,title:"Security"},i=void 0,s={unversionedId:"security",id:"security",title:"Security",description:"Core Concepts",source:"@site/docs/security.md",sourceDirName:".",slug:"/security",permalink:"/jersey-webservice-template/docs/security",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/security.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Security"},sidebar:"tutorialSidebar",previous:{title:"Caching",permalink:"/jersey-webservice-template/docs/caching"},next:{title:"Configuration",permalink:"/jersey-webservice-template/docs/configuration"}},l={},c=[{value:"Core Concepts",id:"core-concepts",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...o}=e;return(0,a.kt)(d,(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"core-concepts"},"Core Concepts"),(0,a.kt)("p",null,"API authentication is largely a solved problem and generally outside the scope of Jersey Webservice Template."),(0,a.kt)("p",null,"Jersey Webservice Template does, however, adds a layer of security on its own by validating ",(0,a.kt)("a",{parentName:"p",href:"https://www.oauth.com/oauth2-servers/access-tokens/"},"OAuth 2 access token")," on all\nincoming request. Each API request requires a standard ",(0,a.kt)("strong",{parentName:"p"},'"Authentication": "Bearer <access_token>"')," token header:"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The validator can be turned on by setting ",(0,a.kt)("strong",{parentName:"p"},"OAUTH_ENABLED")," to ",(0,a.kt)("em",{parentName:"p"},"true"),". There are 3 ways to do so (with the priority in\nthe following order):"),(0,a.kt)("ol",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Setting an OS environment variable using, for example, ",(0,a.kt)("inlineCode",{parentName:"p"},"export OAUTH_ENABLED=true"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Define a JVM system property by"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-java"},'System.setProperty("OAUTH_ENABLED", "true");\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Putting an ",(0,a.kt)("strong",{parentName:"p"},"oauth.properties")," file under ",(0,a.kt)("em",{parentName:"p"},"src/main/resources")," directory with the following content"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-properties"},"OAUTH_ENABLED=true\n")))),(0,a.kt)("p",{parentName:"admonition"},"In addition, JWKs URL needs to be set with ",(0,a.kt)("strong",{parentName:"p"},"JWKS_URL")," using the same approach above. The URL should display something\nlike the following"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "keys": [\n        {\n            "kty": "EC",\n            "use": "sig",\n            "kid": "eTERknhur9q8gisdaf_dfrqrgdfsg",\n            "alg": "ES384",\n            "crv": "P-384",\n            "x": "sdfrgHGYF...",\n            "y": "sdfuUIG&8..."\n        }\n    ]\n}\n'))),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Error loading oauth2-filtering.png",src:n(6179).Z,width:"1600",height:"1284"})),(0,a.kt)("p",null,"To define a token validator, simply implement the ",(0,a.kt)("strong",{parentName:"p"},"AccessTokenValidator")," like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class JwtTokenValidator implements AccessTokenValidator {\n\n    @Override\n    public boolean validate(@NotNull final String accessToken) {\n        // use https://github.com/auth0/java-jwt as recommended by https://jwt.io/\n        return true;\n    }\n}\n")),(0,a.kt)("p",null,"and bind the validator, in ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/jersey-webservice-template/blob/master/src/main/java/com/qubitpi/ws/jersey/template/application/BinderFactory.java"},"BinderFactory"),", using"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"bind(new JwtTokenValidator()).to(AccessTokenValidator.class);\n")),(0,a.kt)("p",null,"For example, to validate a ES384 token using ",(0,a.kt)("em",{parentName:"p"},"AccessTokenValidator"),", we may implement a ",(0,a.kt)("em",{parentName:"p"},"ES384JwtTokenValidator"),"\nvalidator below:"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Note that the implementation",(0,a.kt)("sup",{parentName:"p",id:"fnref-1"},(0,a.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))," below depends on 2 JWT libraries:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>com.auth0</groupId>\n    <artifactId>java-jwt</artifactId>\n    <version>4.4.0</version>\n</dependency>\n<dependency>\n    <groupId>com.auth0</groupId>\n    <artifactId>jwks-rsa</artifactId>\n    <version>0.22.1</version>\n</dependency>\n"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import com.auth0.jwk.InvalidPublicKeyException;\nimport com.auth0.jwk.Jwk;\nimport com.auth0.jwk.JwkException;\nimport com.auth0.jwk.JwkProvider;\nimport com.auth0.jwk.JwkProviderBuilder;\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.interfaces.Verification;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport jakarta.validation.constraints.NotNull;\nimport net.jcip.annotations.Immutable;\nimport net.jcip.annotations.ThreadSafe;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.security.interfaces.ECPublicKey;\nimport java.util.Objects;\n\n/**\n * {@link ES384JwtTokenValidator} validates an <a href="https://jwt.io/">JWT</a> token in ES384 JWS form.\n *\n * It validates the access token by verifying the integrity of the header and payload to ensure that they have not been\n * altered by using token\'s signature section.\n */\n@Immutable\n@ThreadSafe\npublic class ES384JwtTokenValidator implements AccessTokenValidator {\n\n    private static final Logger LOG = LoggerFactory.getLogger(ES384JwtTokenValidator.class);\n\n    private final String jwksUrl;\n\n    /**\n     * Constructs a new {@link ES384JwtTokenValidator} that verfies the signed JWT token with the JWK keys stored at a\n     * specified URL.\n     *\n     * @param jwksUrl  The provided JWKS URL that, on GET, returns a json object such as\n     * <pre>\n     * {@code\n     * {\n     *     "keys": [\n     *         {\n     *             "kty": "EC",\n     *             "use": "sig",\n     *             "kid": "eTERknhur9q8gisdaf_dfrqrgdfsg",\n     *             "alg": "ES384",\n     *             "crv": "P-384",\n     *             "x": "sdfrgHGYF...",\n     *             "y": "sdfuUIG&8..."\n     *         }\n     *     ]\n     * }\n     * }\n     * </pre>\n     *\n     * @throws NullPointerException if {@code jwksUrl} is {@code null}\n     */\n    public ES384JwtTokenValidator(final String jwksUrl) {\n        this.jwksUrl = Objects.requireNonNull(jwksUrl);\n    }\n\n    @Override\n    public boolean validate(@NotNull final String accessToken) {\n        final JwkProvider jwkProvider = getJwkProvider(getJwksUrl());\n        final Jwk jwk = getJwk(jwkProvider, accessToken);\n        final Algorithm algorithm = getVerificationAlgorithm(jwk);\n        final Verification verifier = JWT.require(algorithm);\n\n        verifier.build().verify(accessToken);\n\n        return true;\n    }\n\n    /**\n     * Returns a one-time built instance of {@link JwkProvider} to save performance.\n     *\n     * @param jwksUrl  The JWKS URL that, on GET, returns a json object such as\n     * <pre>\n     * {@code\n     * {\n     *     "keys": [\n     *         {\n     *             "kty": "EC",\n     *             "use": "sig",\n     *             "kid": "eTERknhur9q8gisdaf_dfrqrgdfsg",\n     *             "alg": "ES384",\n     *             "crv": "P-384",\n     *             "x": "sdfrgHGYF...",\n     *             "y": "sdfuUIG&8..."\n     *         }\n     *     ]\n     * }\n     * }\n     * </pre>\n     *\n     * @return a new instance\n     *\n     * @throws IllegalStateException if the {@code jwksUrl} is an invalid URL\n     */\n    @NotNull\n    private static JwkProvider getJwkProvider(@NotNull final String jwksUrl) {\n        try {\n            return new JwkProviderBuilder(new URL(jwksUrl)).build();\n        } catch (final MalformedURLException exception) {\n            final String message = String.format("Invalid JWKS URL: \'%s\'", jwksUrl);\n            LOG.error(message, exception);\n            throw new IllegalStateException(message, exception);\n        }\n    }\n\n    /**\n     * Returns a JWK key set that will be used to verify a given JWT access token.\n     *\n     * @param jwkProvider  An object that contains the JWK; cannot be {@code null}\n     * @param accessToken  A "key" that indexes the JWK from the {@code jwkProvider}; cannot be {@code null}\n     *\n     * @return a JWK key set\n     *\n     * @throws IllegalStateException if no JWK set associated with the provided token is found from {@code jwkProvider}\n     */\n    private static Jwk getJwk(@NotNull final JwkProvider jwkProvider, @NotNull final String accessToken) {\n        try {\n            return jwkProvider.get(JWT.decode(accessToken).getKeyId());\n        } catch (final JwkException exception) {\n            final String message = "The key ID in the access token does not match any JWK";\n            LOG.error(message, exception);\n            throw new IllegalStateException(message, exception);\n        }\n    }\n\n    /**\n     * Returns the verifying algorithm associated with a specified JWK.\n     *\n     * @param jwk  The JWK contains the public key for decrypting the token signature, cannot be {@code null}\n     *\n     * @return a decrypting algorithm with public key and without private key enclosed\n     *\n     * @throws IllegalStateException if public key cannot be retrieved from the JWK\n     */\n    private static Algorithm getVerificationAlgorithm(@NotNull final Jwk jwk) {\n        try {\n            return Algorithm.ECDSA384((ECPublicKey) jwk.getPublicKey(), null);\n        } catch (final InvalidPublicKeyException exception) {\n            final String message = "The public key cannot be build from JWK";\n            LOG.error(message, exception);\n            throw new IllegalStateException(message, exception);\n        }\n    }\n\n    @NotNull\n    private String getJwksUrl() {\n        return jwksUrl;\n    }\n}\n')),(0,a.kt)("div",{className:"footnotes"},(0,a.kt)("hr",{parentName:"div"}),(0,a.kt)("ol",{parentName:"div"},(0,a.kt)("li",{parentName:"ol",id:"fn-1"},(0,a.kt)("a",{parentName:"li",href:"https://stackoverflow.com/a/58965516"},"https://stackoverflow.com/a/58965516"),(0,a.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}u.isMDXComponent=!0},6179:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/oauth2-filtering-55a04bfd363909bef6e9536709b82c36.png"}}]);