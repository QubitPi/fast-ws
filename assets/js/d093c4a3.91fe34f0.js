"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[612],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,b=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(b,o(o({ref:t},p),{},{components:n})):r.createElement(b,o({ref:t},p))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2193:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:6,title:"Elide Middleware"},o=void 0,s={unversionedId:"elide",id:"elide",title:"Elide Middleware",description:"Template can delegate persistence operations, a common webservice feature, to [Elide].",source:"@site/docs/elide.md",sourceDirName:".",slug:"/elide",permalink:"/jersey-ws-template/docs/elide",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/elide.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Elide Middleware"},sidebar:"tutorialSidebar",previous:{title:"Setting Up Sentry.io",permalink:"/jersey-ws-template/docs/sentry"}},l={},c=[{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Entity Missing Default Constructor",id:"entity-missing-default-constructor",level:3},{value:"How to Exclude GraphQL Feature",id:"how-to-exclude-graphql-feature",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Template can delegate persistence operations, a common webservice feature, to ",(0,i.kt)("a",{parentName:"p",href:"https://elide.io/"},"Elide"),"."),(0,i.kt)("p",null,"Configuring Elide requires 2 ",(0,i.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/jersey/ioc.html"},"bindings"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://github.com/yahoo/elide/blob/master/elide-core/src/main/java/com/yahoo/elide/Elide.java"},"Elide")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://github.com/yahoo/elide/blob/master/elide-core/src/main/java/com/yahoo/elide/ElideSettings.java"},"ElideSettings"))," itself with 2 extra sub-bindings:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"EntityDictionary")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"DataStore"))))),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"ResourceConfig")," looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.yahoo.elide.Elide;\n\nimport org.glassfish.hk2.api.ServiceLocator;\nimport org.glassfish.hk2.utilities.Binder;\n\nimport jakarta.inject.Inject;\nimport jakarta.servlet.ServletContext;\nimport jakarta.ws.rs.ApplicationPath;\nimport jakarta.ws.rs.core.Context;\nimport net.jcip.annotations.Immutable;\nimport net.jcip.annotations.ThreadSafe;\n\n/**\n * The resource configuration for the web applications.\n */\n@Immutable\n@ThreadSafe\n@ApplicationPath("/v1/data/")\npublic class ResourceConfig extends org.glassfish.jersey.server.ResourceConfig {\n\n    private static final String ENDPOINT_PACKAGE = "com.yahoo.elide.jsonapi.resources";\n\n    /**\n     * DI Constructor.\n     *\n     * @param injector  A standard HK2 service locator\n     * @param servletContext  Currently unused\n     */\n    @Inject\n    public ResourceConfig(final ServiceLocator injector, @Context final ServletContext servletContext) {\n        final Binder binder = new BinderFactory().buildBinder(injector);\n\n        register(binder);\n\n        register(new org.glassfish.hk2.utilities.binding.AbstractBinder() {\n            @Override\n            protected void configure() {\n                final Elide elide = injector.getService(Elide.class, "elide");\n                elide.doScans();\n            }\n        });\n\n        packages(ENDPOINT_PACKAGE);\n    }\n}\n\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"binding")," looks like"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import static com.yahoo.elide.standalone.Util.combineModelEntities;\n\nimport com.yahoo.elide.Elide;\nimport com.yahoo.elide.ElideSettings;\nimport com.yahoo.elide.ElideSettingsBuilder;\nimport com.yahoo.elide.core.TransactionRegistry;\nimport com.yahoo.elide.core.datastore.DataStore;\nimport com.yahoo.elide.core.dictionary.EntityDictionary;\nimport com.yahoo.elide.core.dictionary.Injector;\nimport com.yahoo.elide.core.utils.ClassScanner;\nimport com.yahoo.elide.core.utils.DefaultClassScanner;\nimport com.yahoo.elide.core.utils.coerce.CoerceUtil;\nimport com.yahoo.elide.datastores.jpa.JpaDataStore;\nimport com.yahoo.elide.datastores.jpa.PersistenceUnitInfoImpl;\nimport com.yahoo.elide.datastores.jpa.transaction.NonJtaTransaction;\n\nimport org.aeonbits.owner.ConfigFactory;\nimport org.glassfish.hk2.api.ServiceLocator;\nimport org.glassfish.hk2.utilities.Binder;\nimport org.glassfish.hk2.utilities.binding.AbstractBinder;\nimport org.hibernate.Session;\nimport org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl;\nimport org.hibernate.jpa.boot.internal.PersistenceUnitInfoDescriptor;\n\nimport jakarta.persistence.EntityManager;\nimport jakarta.persistence.EntityManagerFactory;\nimport jakarta.persistence.spi.PersistenceUnitInfo;\nimport jakarta.validation.constraints.NotNull;\nimport net.jcip.annotations.Immutable;\nimport net.jcip.annotations.ThreadSafe;\n\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Properties;\nimport java.util.function.Consumer;\n\n/**\n * A binder factory builds a custom binder for the Jersey application.\n * <p>\n * The factory makes the component object instance that will eventually be passed to\n * {@link org.glassfish.jersey.server.ResourceConfig#register(Object)}.\n */\n@Immutable\n@ThreadSafe\npublic class BinderFactory {\n\n    /**\n     * Builds a hk2 Binder instance.\n     * <p>\n     * This binder should bind all relevant resources for runtime dependency injection.\n     *\n     * @param injector  A standard HK2 service locator\n     *\n     * @return a binder instance that will be registered by putting as a parameter to\n     * {@link org.glassfish.jersey.server.ResourceConfig#register(Object)}\n     */\n    @NotNull\n    public Binder buildBinder(final ServiceLocator injector) {\n        return new AbstractBinder() {\n\n            private static final Consumer<EntityManager> TXCANCEL = em -> em.unwrap(Session.class).cancelQuery();\n\n            private static final ApplicationConfig CONFIG = ConfigFactory.create(ApplicationConfig.class);\n\n            private final ClassScanner classScanner = new DefaultClassScanner();\n\n            @Override\n            protected void configure() {\n                final ElideSettings elideSettings = buildElideSettings();\n\n                bind(buildElide(elideSettings)).to(Elide.class).named("elide");\n                bind(elideSettings).to(ElideSettings.class);\n                bind(elideSettings.getDictionary()).to(EntityDictionary.class);\n                bind(elideSettings.getDataStore()).to(DataStore.class).named("elideDataStore");\n            }\n\n            private Elide buildElide(final ElideSettings elideSettings) {\n                return new Elide(\n                        elideSettings,\n                        new TransactionRegistry(),\n                        elideSettings.getDictionary().getScanner(),\n                        false\n                );\n            }\n\n            private ElideSettings buildElideSettings() {\n                return new ElideSettingsBuilder(buildDataStore(buildEntityManagerFactory()))\n                        .withEntityDictionary(buildEntityDictionary(injector))\n                        .build();\n            }\n\n            private DataStore buildDataStore(final EntityManagerFactory entityManagerFactory) {\n                return new JpaDataStore(\n                        entityManagerFactory::createEntityManager,\n                        em -> new NonJtaTransaction(em, TXCANCEL),\n                        entityManagerFactory::getMetamodel);\n            }\n\n            private EntityManagerFactory buildEntityManagerFactory() {\n                final String modelPackageName = CONFIG.modelPackageName();\n                final ClassLoader classLoader = null;\n\n                final PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(\n                        "astraios",\n                        combineModelEntities(classScanner, modelPackageName, false),\n                        getDefaultDbConfigs(),\n                        classLoader\n                );\n\n                return new EntityManagerFactoryBuilderImpl(\n                        new PersistenceUnitInfoDescriptor(persistenceUnitInfo),\n                        new HashMap<>(),\n                        classLoader\n                ).build();\n            }\n\n            private static Properties getDefaultDbConfigs() {\n                final Properties dbProperties = new Properties();\n\n                dbProperties.put("hibernate.show_sql", "true");\n                dbProperties.put("hibernate.hbm2ddl.auto", "create");\n                dbProperties.put("hibernate.dialect", "org.hibernate.dialect.MySQLDialect");\n                dbProperties.put("hibernate.current_session_context_class", "thread");\n                dbProperties.put("hibernate.jdbc.use_scrollable_resultset", "true");\n\n                // Collection Proxy & JDBC Batching\n                dbProperties.put("hibernate.jdbc.batch_size", "50");\n                dbProperties.put("hibernate.jdbc.fetch_size", "50");\n                dbProperties.put("hibernate.default_batch_fetch_size", "100");\n\n                // Hikari Connection Pool Settings\n                dbProperties.putIfAbsent("hibernate.connection.provider_class",\n                        "com.zaxxer.hikari.hibernate.HikariConnectionProvider");\n                dbProperties.putIfAbsent("hibernate.hikari.connectionTimeout", "20000");\n                dbProperties.putIfAbsent("hibernate.hikari.maximumPoolSize", "30");\n                dbProperties.putIfAbsent("hibernate.hikari.idleTimeout", "30000");\n\n                dbProperties.put("jakarta.persistence.jdbc.driver", "com.mysql.jdbc.Driver");\n                dbProperties.put("jakarta.persistence.jdbc.url", "jdbc:mysql://localhost/elide?serverTimezone=UTC");\n                dbProperties.put("jakarta.persistence.jdbc.user", "root");\n                dbProperties.put("jakarta.persistence.jdbc.password", "root");\n\n                return dbProperties;\n            }\n\n            private EntityDictionary buildEntityDictionary(final ServiceLocator injector) {\n                return new EntityDictionary(\n                        new HashMap<>(),\n                        new HashMap<>(),\n                        new Injector() {\n                            @Override\n                            public void inject(final Object entity) {\n                                injector.inject(entity);\n                            }\n\n                            @Override\n                            public <T> T instantiate(final Class<T> cls) {\n                                return injector.create(cls);\n                            }\n                        },\n                        CoerceUtil::lookup,\n                        new HashSet<>(),\n                        classScanner\n                );\n            }\n        };\n    }\n}\n\n')),(0,i.kt)("p",null,"The jetty-base should be initialized with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"java -jar $JETTY_HOME/start.jar --add-module=annotations,server,http,deploy,servlet,webapp,resources,jsp,websocket\n")),(0,i.kt)("p",null,"Example POST via JSON API:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST http://localhost:8080/v1/data/EntityType \\\n  -H "Content-Type: application/vnd.api+json" \\\n  -H "Accept: application/vnd.api+json" \\\n  -d \'{"data": {"type": "EntityType", "id": "elide-demo"}}\'\n')),(0,i.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,i.kt)("h3",{id:"entity-missing-default-constructor"},"Entity Missing Default Constructor"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"13:17:52.396 [main] INFO  o.h.m.i.EntityInstantiatorPojoStandard - HHH000182: No default (no-argument) constructor for\nclass: ... (class must be instantiated by Interceptor)\n")),(0,i.kt)("h3",{id:"how-to-exclude-graphql-feature"},"How to Exclude GraphQL Feature"),(0,i.kt)("p",null,"To optionally disable GraphQL endpoints, simply exclude corresponding dependencies in POM. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"        <dependency>\n            <groupId>com.yahoo.elide</groupId>\n            <artifactId>elide-core</artifactId>\n            <version>7.0.0-pr6</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>com.yahoo.elide</groupId>\n                    <artifactId>elide-graphql</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n")))}u.isMDXComponent=!0}}]);