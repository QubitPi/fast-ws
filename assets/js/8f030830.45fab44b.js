"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[618],{5201:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=t(5893),s=t(1151);const r={sidebar_position:3,title:"Development"},a=void 0,o={id:"development",title:"Development",description:"[//]: # (Copyright Jiaqi Liu)",source:"@site/docs/development.md",sourceDirName:".",slug:"/development",permalink:"/jersey-webservice-template/docs/development",draft:!1,unlisted:!1,editUrl:"https://github.com/QubitPi/jersey-webservice-template/tree/master/docs/docs/development.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Development"},sidebar:"tutorialSidebar",previous:{title:"Setup",permalink:"/jersey-webservice-template/docs/setup"},next:{title:"JPA through yahoo/elide",permalink:"/jersey-webservice-template/docs/category/jpa-through-yahooelide"}},l={},c=[{value:"Running Tests",id:"running-tests",level:2},{value:"Packaging",id:"packaging",level:2},{value:"Running Webservice in Docker (Local Dev &amp; Testing ONLY)",id:"running-webservice-in-docker-local-dev--testing-only",level:2},{value:"Getting the Image",id:"getting-the-image",level:3},{value:"Docker Hub",id:"docker-hub",level:4},{value:"GitHub",id:"github",level:4},{value:"Standing up a Container",id:"standing-up-a-container",level:3},{value:"Running Webservice in Standalone Jetty (Production)",id:"running-webservice-in-standalone-jetty-production",level:2},{value:"Download Jetty",id:"download-jetty",level:3},{value:"Setting Up Standalone Jetty",id:"setting-up-standalone-jetty",level:3},{value:"Running Webservice",id:"running-webservice",level:3},{value:"Deployment",id:"deployment",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,i.jsx)(n.p,{children:"The following commands runs both unit and integration tests"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["For ",(0,i.jsx)(n.a,{href:"elide",children:"JPA through Elide Middleware"})," template, please refer to its dedicated ",(0,i.jsx)(n.a,{href:"elide#setup",children:"setup"})," section first"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mvn clean verify\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For IT tests, we use ",(0,i.jsx)(n.a,{href:"https://qubitpi.github.io/testcontainers-java/",children:"Testcontainers"})," instead of ",(0,i.jsx)(n.a,{href:"https://mysql.jcabi.com/",children:"jcabi-mysql"})," because the latter is hard to configure and debug and\n",(0,i.jsx)(n.a,{href:"https://qubitpi.github.io/testcontainers-java/",children:"Testcontainers"})," support more types of db, such as mongo"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"If tests fail with 404 or endpoint-not-working, make sure the port 8080 is not occupied all integration tests runs\nagainst webservice running at that port."})}),"\n",(0,i.jsx)(n.h2,{id:"packaging",children:"Packaging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mvn clean package\n"})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/WAR_(file_format)",children:"WAR file"})," named ",(0,i.jsx)(n.strong,{children:"jersey-webservice-template-1.0-SNAPSHOT.war"})," will\nbe generated under ",(0,i.jsx)(n.em,{children:"target"})," directory for ",(0,i.jsx)(n.a,{href:"#running-webservice-in-standalone-jetty-production",children:"running in Jetty"})]}),"\n",(0,i.jsx)(n.h2,{id:"running-webservice-in-docker-local-dev--testing-only",children:"Running Webservice in Docker (Local Dev & Testing ONLY)"}),"\n",(0,i.jsxs)(n.p,{children:["This ",(0,i.jsx)(n.a,{href:"https://github.com/QubitPi/jersey-webservice-template/blob/master/Dockerfile",children:"Docker"})," image can be used for"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"decoupling frontend and backend developments, and"}),"\n",(0,i.jsx)(n.li,{children:"making it easy to run E2E testing of application backed by Jersey Webservice Template in CI/CD"}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:["Docker designed here is intended for local development and testing purposes ONLY! ",(0,i.jsx)(n.em,{children:"It is strongly discouraged\nto run this Docker container in production!"})]})}),"\n",(0,i.jsx)(n.h3,{id:"getting-the-image",children:"Getting the Image"}),"\n",(0,i.jsx)(n.p,{children:"We can obtain the image in one of the 2 approaches below:"}),"\n",(0,i.jsx)(n.h4,{id:"docker-hub",children:"Docker Hub"}),"\n",(0,i.jsxs)(n.p,{children:["We can pull the image from ",(0,i.jsx)(n.a,{href:"https://hub.docker.com/r/jack20191124/jersey-webservice-template/",children:"my docker hub"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker pull jack20191124/jersey-webservice-template\n"})}),"\n",(0,i.jsx)(n.h4,{id:"github",children:"GitHub"}),"\n",(0,i.jsxs)(n.p,{children:["We could also build the image from ",(0,i.jsx)(n.a,{href:"https://github.com/QubitPi/jersey-webservice-template/blob/master/Dockerfile",children:"source"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/QubitPi/jersey-webservice-template.git\ncd jersey-webservice-template\nmvn clean package\ndocker build -t jack20191124/jersey-webservice-template .\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"mvn clean package"})," requires JDK 17 which can be setup with ",(0,i.jsx)(n.a,{href:"setup",children:"instructions here"})]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"jack20191124/jersey-webservice-template"})," in the last command is the image name; we could replace that value with\nanything preferred"]}),"\n"]})}),"\n",(0,i.jsx)(n.h3,{id:"standing-up-a-container",children:"Standing up a Container"}),"\n",(0,i.jsx)(n.p,{children:"When image is built, we can spin up an instance with"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run --name=jersey-webservice-template -it -p 8080:8080 jack20191124/jersey-webservice-template\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"name=jersey-webservice-template"}),': the container is named "jersey-webservice-template". We can change it\naccordingly.']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"-p 8080:8080"}),": 8080 is the port where webservice will listen on. With this port forwarding, we will be able to\naccess webservice from host machine web browser at ",(0,i.jsx)(n.code,{children:"localhost:8080"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If we see the following output, it means the container is running properly and ready to accept request such as\n",(0,i.jsx)(n.code,{children:"http://localhost:8080/v1/data/healthcheck"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"...\n\n2023-10-24 05:21:46.032:INFO :oejss.DefaultSessionIdManager:main: Session workerName=node0\n2023-10-24 05:21:46.977:INFO :oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@2892dae4{ROOT.war,/,file:///tmp/jetty-0_0_0_0-8080-ROOT_war-_-any-13760845903749066689/webapp/,AVAILABLE}{/jetty-base/webapps/ROOT.war}\n2023-10-24 05:21:46.994:INFO :oejs.AbstractConnector:main: Started ServerConnector@5c8dfc08{HTTP/1.1, (http/1.1)}{0.0.0.0:8080}\n2023-10-24 05:21:47.009:INFO :oejs.Server:main: Started Server@71d44a3{STARTING}[11.0.15,sto=5000] @2947ms\n"})}),"\n",(0,i.jsx)(n.h2,{id:"running-webservice-in-standalone-jetty-production",children:"Running Webservice in Standalone Jetty (Production)"}),"\n",(0,i.jsx)(n.h3,{id:"download-jetty",children:"Download Jetty"}),"\n",(0,i.jsxs)(n.p,{children:["For JDK ",(0,i.jsx)(n.strong,{children:"17"}),", which is the version JWT runs on, it's been tested that Jetty ",(0,i.jsx)(n.em,{children:"11.0.15"})," worked. Hence, we will use\n",(0,i.jsx)(n.a,{href:"https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-home/11.0.15/jetty-home-11.0.15.tar.gz",children:'"11.0.15" release'})," as\nan example:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Error loading download-jetty.png",src:t(8662).Z+"",width:"3584",height:"1878"})}),"\n",(0,i.jsxs)(n.p,{children:["Put the ",(0,i.jsx)(n.code,{children:"tar.gz"})," file into a location of your choice as the installation path and extract the Jetty binary using"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"tar -xzvf jetty-home-11.0.15.tar.gz\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The extracted directory ",(0,i.jsx)(n.em,{children:"jetty-home-11.0.15"})," is the Jetty distribution. We call this directory ",(0,i.jsx)(n.strong,{children:"$JETTY_HOME"}),", which\nshould not be modified."]}),"\n",(0,i.jsx)(n.h3,{id:"setting-up-standalone-jetty",children:"Setting Up Standalone Jetty"}),"\n",(0,i.jsxs)(n.p,{children:["Our ",(0,i.jsx)(n.a,{href:"#packaging",children:"WAR file"})," will be dropped to a directory where Jetty can pick up and run. We call this directory\n",(0,i.jsx)(n.strong,{children:"$JETTY_BASE"}),", which is usually different from the ",(0,i.jsx)(n.em,{children:"$JETTY_HOME"}),". The ",(0,i.jsx)(n.em,{children:"$JETTY_BASE"})," also contains container runtime\nconfigs. In short, the Standalone Jetty container will be setup with"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"export JETTY_HOME=/path/to/jetty-home-11.0.15\nmkdir -p /path/to/jetty-base\ncd /path/to/jetty-base\njava -jar $JETTY_HOME/start.jar --add-module=annotations,server,http,deploy,servlet,webapp,resources,jsp\n"})}),"\n",(0,i.jsxs)(n.p,{children:["where ",(0,i.jsx)(n.code,{children:"/path/to/"})," is the ",(0,i.jsx)(n.em,{children:"absolute"})," path to the directory containing the ",(0,i.jsx)(n.code,{children:"jetty-home-11.0.15"})," directory"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"--add-module=annotations,server,http,deploy,servlet,webapp,resources,jsp"})," is how we configure the Jetty\ncontainer."]}),"\n",(0,i.jsxs)(n.p,{children:["Lastly, drop the ",(0,i.jsx)(n.a,{href:"#packaging",children:"WAR file"})," into ",(0,i.jsx)(n.strong,{children:"/path/to/jetty-base/webapps"})," directory and rename the WAR file to\n",(0,i.jsx)(n.strong,{children:"ROOT.war"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mv /path/to/war-file /path/to/jetty-base/webapps/ROOT.war\n"})}),"\n",(0,i.jsx)(n.h3,{id:"running-webservice",children:"Running Webservice"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"java -jar $JETTY_HOME/start.jar\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The webservice will run on port ",(0,i.jsx)(n.strong,{children:"8080"}),", and you will see the data you inserted"]}),"\n",(0,i.jsx)(n.h2,{id:"deployment",children:"Deployment"}),"\n",(0,i.jsx)(n.p,{children:"Jersey Webservice Template supports\n[automatically deploying to AWS through HashiCorp][hashicorp-aws webservice]"})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8662:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/download-jetty-edc103f9f296011d2a6f18b625bff490.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>a});var i=t(7294);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);