"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9577],{8448:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var n=a(5893),s=a(1151);const i={slug:"happy-path",title:"Happy Path",authors:"jiaqi",tags:["Testing"]},o=void 0,r={permalink:"/jersey-webservice-template/blog/happy-path",editUrl:"https://github.com/QubitPi/jersey-webservice-template/tree/master/docs/blog/2022-07-03-happy-path.md",source:"@site/blog/2022-07-03-happy-path.md",title:"Happy Path",description:"[//]: # (Copyright Jiaqi Liu)",date:"2022-07-03T00:00:00.000Z",formattedDate:"July 3, 2022",tags:[{label:"Testing",permalink:"/jersey-webservice-template/blog/tags/testing"}],readingTime:1.74,hasTruncateMarker:!0,authors:[{name:"Jack",title:"Maintainer of Jersey Webservice Template",url:"https://github.com/QubitPi",imageURL:"https://avatars.githubusercontent.com/u/16126939?v=4",key:"jiaqi"}],frontMatter:{slug:"happy-path",title:"Happy Path",authors:"jiaqi",tags:["Testing"]},unlisted:!1,prevItem:{title:'Tired of Null Pointer Exceptions? Consider Using Java SE 8\'s "Optional"',permalink:"/jersey-webservice-template/blog/java-optional"},nextItem:{title:"Defensive Copy",permalink:"/jersey-webservice-template/blog/defensive-copy"}},p={authorsImageUrls:[void 0]},l=[];function c(e){const t={a:"a",blockquote:"blockquote",p:"p",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"In the context of software or information modeling, a happy path (sometimes called happy flow) is a default scenario\nfeaturing no exceptional or error conditions. For example, the happy path for a function validating credit card numbers\nwould be where none of the validation rules raise an error, thus letting execution continue successfully to the end,\ngenerating a positive response."}),"\n",(0,n.jsxs)(t.p,{children:["Process steps for a happy path are also used in the context of a ",(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Use_case",children:"use case"}),". In\ncontrast to the happy path, process steps for alternate paths and exception paths may also be documented."]}),"\n",(0,n.jsx)(t.p,{children:"Happy path test is a well-defined test case using known input, which executes without exception and produces an expected\noutput. Happy path testing can show that a system meets its functional requirements but it doesn't guarantee a graceful\nhandling of error conditions or aid in finding hidden bugs."}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"Happy day (or sunny day) scenario and golden path are synonyms for happy path."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"In use case analysis, there is only one happy path, but there may be any number of additional alternate path scenarios\nwhich are all valid optional outcomes. If valid alternatives exist, the happy path is then identified as the default or\nmost likely positive alternative. The analysis may also show one or more exception paths. An exception path is taken as\nthe result of a fault condition. Use cases and the resulting interactions are commonly modeled in graphical languages\nsuch as the Unified Modeling Language (UML) or SysML"})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1151:(e,t,a)=>{a.d(t,{Z:()=>r,a:()=>o});var n=a(7294);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);