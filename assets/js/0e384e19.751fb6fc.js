"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9671],{7876:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var n=o(5893),s=o(1151);const i={sidebar_position:1,title:"Introduction"},a=void 0,r={id:"intro",title:"Introduction",description:"[//]: # (Copyright Jiaqi Liu)",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/jersey-webservice-template/docs/intro",draft:!1,unlisted:!1,editUrl:"https://github.com/QubitPi/jersey-webservice-template/tree/master/docs/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Introduction"},sidebar:"tutorialSidebar",next:{title:"Setup",permalink:"/jersey-webservice-template/docs/setup"}},l={},c=[{value:"The Tao of Jersey Webservice Template",id:"the-tao-of-jersey-webservice-template",level:2},{value:"Workflows, Not Technologies",id:"workflows-not-technologies",level:3},{value:"Immutable Infrastructure",id:"immutable-infrastructure",level:3},{value:"Immutability",id:"immutability",level:4},{value:"Binding to Standard Makes the Best Software",id:"binding-to-standard-makes-the-best-software",level:3}];function d(e){const t={a:"a",em:"em",h2:"h2",h3:"h3",h4:"h4",p:"p",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"the-tao-of-jersey-webservice-template",children:"The Tao of Jersey Webservice Template"}),"\n",(0,n.jsx)(t.h3,{id:"workflows-not-technologies",children:"Workflows, Not Technologies"}),"\n",(0,n.jsx)(t.p,{children:"Our approach is to focus on the end goal and workflow, rather than the underlying technologies. Software and hardware\nwill evolve and improve, and it is our goal to make adoption of new tooling simple, while still providing the most\nstreamlined user experience possible. Product design starts with an envisioned workflow to achieve a set goal. We then\nidentify existing tools that simplify the workflow. If a sufficient tool does not exist, we step in to build it. This\nleads to a fundamentally technology-agnostic view - we will use the best technology available to solve the problem. As\ntechnologies evolve and better tooling emerges, the ideal workflow is just updated to leverage those technologies.\nTechnologies change, end goals stay the same."}),"\n",(0,n.jsx)(t.h3,{id:"immutable-infrastructure",children:"Immutable Infrastructure"}),"\n",(0,n.jsx)(t.h4,{id:"immutability",children:"Immutability"}),"\n",(0,n.jsx)(t.p,{children:"Immutability is the inability to be changed. This is a concept that can apply at many levels. The most familiar\nimplementation of immutability is version control systems; once code is committed, that commit is forever fixed. Version\ncontrol systems, such as git, enjoy widespread use because they offer tremendous benefits. Code becomes versionable,\nallowing rollback and roll forwards. You can inspect and write code atomically. Using versions enables auditing and\ncreates a clear history of how the current state was reached. When something breaks, the origin of the error can be\ndetermined using the version history."}),"\n",(0,n.jsx)(t.p,{children:"The concept of immutability can be extended to many aspects of infrastructure \u2014 application source, application versions,\nand server state. We believe that using immutable infrastructure leads to more robust systems that are simpler to\noperate, debug, version and visualize."}),"\n",(0,n.jsx)(t.h3,{id:"binding-to-standard-makes-the-best-software",children:"Binding to Standard Makes the Best Software"}),"\n",(0,n.jsx)(t.p,{children:"Web services technology are now widespread, standardizing organizational approaches to the cloud. But as business\nexpand, web service often struggle to reach the desired levels of scale. Development slows as complexity grows."}),"\n",(0,n.jsx)(t.p,{children:"By codifying and standardizing a webservice development and compliance rules, developers can be free to do what they\nwant to: add business value by writing code."}),"\n",(0,n.jsxs)(t.p,{children:["JWT applies the ",(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Pareto_principle",children:"Pareto Principle"}),' to webservice design. Use case analysis shows that the vast majority of web\nservice component need just a handful of inputs to meet most customer requirements. Focusing on this "easy 80%" of use\ncases results in neat, concise web service that are simple to understand and use. It also causes web service to become\nmore opinionated, which guides developers into a standard pattern, bringing consistency around how software is used in\nthe organization.']}),"\n",(0,n.jsxs)(t.p,{children:["Gradually, more than just code can be shared. Best practices start to emerge. ",(0,n.jsx)(t.a,{href:"https://www.hashicorp.com/blog/maturing-your-terraform-workflow#golden-paths",children:"Golden paths"})," are created."]}),"\n",(0,n.jsxs)(t.p,{children:["[The Technology Acceptance Model (TAM)] suggests that adoption is predicted on how much people see something as ",(0,n.jsx)(t.em,{children:"being\nuseful"})," and ",(0,n.jsx)(t.em,{children:"easy to use"}),'. Standardization and golden paths address both these factors and make adoption of an open\nsource project more likely. JWT does more to make itself easy to use by enabling "on-click" experience that goes from\nnothing to a full-fledged webservice on AWS cloud']})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,o)=>{o.d(t,{Z:()=>r,a:()=>a});var n=o(7294);const s={},i=n.createContext(s);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);