"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[653],{6564:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(5893),i=t(1151);const o={sidebar_position:6,title:"Security"},a=void 0,s={id:"security",title:"Security",description:"Core Concepts",source:"@site/docs/security.md",sourceDirName:".",slug:"/security",permalink:"/jersey-webservice-template/docs/security",draft:!1,unlisted:!1,editUrl:"https://github.com/QubitPi/jersey-webservice-template/tree/master/docs/docs/security.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Security"},sidebar:"tutorialSidebar",previous:{title:"Caching",permalink:"/jersey-webservice-template/docs/caching"},next:{title:"Configuration",permalink:"/jersey-webservice-template/docs/configuration"}},c={},l=[{value:"Core Concepts",id:"core-concepts",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",section:"section",strong:"strong",sup:"sup",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,r.jsx)(n.p,{children:"API authentication is largely a solved problem and generally outside the scope of Jersey Webservice Template."}),"\n",(0,r.jsxs)(n.p,{children:["Jersey Webservice Template does, however, adds a layer of security on its own by validating ",(0,r.jsx)(n.a,{href:"https://www.oauth.com/oauth2-servers/access-tokens/",children:"OAuth 2 access token"})," on\nall incoming request. Each API request requires a standard ",(0,r.jsx)(n.code,{children:'"Authentication": "Bearer <access_token>"'})," token header:"]}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["The validator can be turned on by setting ",(0,r.jsx)(n.strong,{children:"OAUTH_ENABLED"})," to ",(0,r.jsx)(n.em,{children:"true"}),". There are 3 ways to do so (with the priority in\nthe following order):"]}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Setting an OS environment variable using, for example, ",(0,r.jsx)(n.code,{children:"export OAUTH_ENABLED=true"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Define a JVM system property by"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'System.setProperty("OAUTH_ENABLED", "true");\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Putting an ",(0,r.jsx)(n.strong,{children:"oauth.properties"})," file under ",(0,r.jsx)(n.em,{children:"src/main/resources"})," directory with the following content"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"OAUTH_ENABLED=true\n"})}),"\n"]}),"\n"]}),(0,r.jsxs)(n.p,{children:["In addition, JWKs URL needs to be set with ",(0,r.jsx)(n.strong,{children:"JWKS_URL"})," using the same approach above. The URL should display something\nlike the following"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "keys": [\n        {\n            "kty": "EC",\n            "use": "sig",\n            "kid": "eTERknhur9q8gisdaf_dfrqrgdfsg",\n            "alg": "ES384",\n            "crv": "P-384",\n            "x": "sdfrgHGYF...",\n            "y": "sdfuUIG&8..."\n        }\n    ]\n}\n'})})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Error loading oauth2-filtering.png",src:t(6179).Z+"",width:"1600",height:"1284"})}),"\n",(0,r.jsxs)(n.p,{children:["To define a token validator, simply implement the ",(0,r.jsx)(n.strong,{children:"AccessTokenValidator"})," like so:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class JwtTokenValidator implements AccessTokenValidator {\n\n    @Override\n    public boolean validate(@NotNull final String accessToken) {\n        // use https://github.com/auth0/java-jwt as recommended by https://jwt.io/\n        return true;\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["and bind the validator, in ",(0,r.jsx)(n.a,{href:"https://github.com/QubitPi/jersey-webservice-template/blob/master/src/main/java/com/qubitpi/ws/jersey/template/application/BinderFactory.java",children:"BinderFactory"}),", using"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"bind(new JwtTokenValidator()).to(AccessTokenValidator.class);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For example, to validate a ES384 token using ",(0,r.jsx)(n.em,{children:"AccessTokenValidator"}),", we may implement a ",(0,r.jsx)(n.em,{children:"ES384JwtTokenValidator"}),"\nvalidator below:"]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsxs)(n.p,{children:["Note that the implementation",(0,r.jsx)(n.sup,{children:(0,r.jsx)(n.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})," below depends on 2 JWT libraries:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>com.auth0</groupId>\n    <artifactId>java-jwt</artifactId>\n    <version>4.4.0</version>\n</dependency>\n<dependency>\n    <groupId>com.auth0</groupId>\n    <artifactId>jwks-rsa</artifactId>\n    <version>0.22.1</version>\n</dependency>\n"})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import com.auth0.jwk.InvalidPublicKeyException;\nimport com.auth0.jwk.Jwk;\nimport com.auth0.jwk.JwkException;\nimport com.auth0.jwk.JwkProvider;\nimport com.auth0.jwk.JwkProviderBuilder;\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.interfaces.Verification;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport jakarta.validation.constraints.NotNull;\nimport net.jcip.annotations.Immutable;\nimport net.jcip.annotations.ThreadSafe;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.security.interfaces.ECPublicKey;\nimport java.util.Objects;\n\n/**\n * {@link ES384JwtTokenValidator} validates an <a href="https://jwt.io/">JWT</a> token in ES384 JWS form.\n *\n * It validates the access token by verifying the integrity of the header and payload to ensure that they have not been\n * altered by using token\'s signature section.\n */\n@Immutable\n@ThreadSafe\npublic class ES384JwtTokenValidator implements AccessTokenValidator {\n\n    private static final Logger LOG = LoggerFactory.getLogger(ES384JwtTokenValidator.class);\n\n    private final String jwksUrl;\n\n    /**\n     * Constructs a new {@link ES384JwtTokenValidator} that verfies the signed JWT token with the JWK keys stored at a\n     * specified URL.\n     *\n     * @param jwksUrl  The provided JWKS URL that, on GET, returns a json object such as\n     * <pre>\n     * {@code\n     * {\n     *     "keys": [\n     *         {\n     *             "kty": "EC",\n     *             "use": "sig",\n     *             "kid": "eTERknhur9q8gisdaf_dfrqrgdfsg",\n     *             "alg": "ES384",\n     *             "crv": "P-384",\n     *             "x": "sdfrgHGYF...",\n     *             "y": "sdfuUIG&8..."\n     *         }\n     *     ]\n     * }\n     * }\n     * </pre>\n     *\n     * @throws NullPointerException if {@code jwksUrl} is {@code null}\n     */\n    public ES384JwtTokenValidator(final String jwksUrl) {\n        this.jwksUrl = Objects.requireNonNull(jwksUrl);\n    }\n\n    @Override\n    public boolean validate(@NotNull final String accessToken) {\n        final JwkProvider jwkProvider = getJwkProvider(getJwksUrl());\n        final Jwk jwk = getJwk(jwkProvider, accessToken);\n        final Algorithm algorithm = getVerificationAlgorithm(jwk);\n        final Verification verifier = JWT.require(algorithm);\n\n        verifier.build().verify(accessToken);\n\n        return true;\n    }\n\n    /**\n     * Returns a one-time built instance of {@link JwkProvider} to save performance.\n     *\n     * @param jwksUrl  The JWKS URL that, on GET, returns a json object such as\n     * <pre>\n     * {@code\n     * {\n     *     "keys": [\n     *         {\n     *             "kty": "EC",\n     *             "use": "sig",\n     *             "kid": "eTERknhur9q8gisdaf_dfrqrgdfsg",\n     *             "alg": "ES384",\n     *             "crv": "P-384",\n     *             "x": "sdfrgHGYF...",\n     *             "y": "sdfuUIG&8..."\n     *         }\n     *     ]\n     * }\n     * }\n     * </pre>\n     *\n     * @return a new instance\n     *\n     * @throws IllegalStateException if the {@code jwksUrl} is an invalid URL\n     */\n    @NotNull\n    private static JwkProvider getJwkProvider(@NotNull final String jwksUrl) {\n        try {\n            return new JwkProviderBuilder(new URL(jwksUrl)).build();\n        } catch (final MalformedURLException exception) {\n            final String message = String.format("Invalid JWKS URL: \'%s\'", jwksUrl);\n            LOG.error(message, exception);\n            throw new IllegalStateException(message, exception);\n        }\n    }\n\n    /**\n     * Returns a JWK key set that will be used to verify a given JWT access token.\n     *\n     * @param jwkProvider  An object that contains the JWK; cannot be {@code null}\n     * @param accessToken  A "key" that indexes the JWK from the {@code jwkProvider}; cannot be {@code null}\n     *\n     * @return a JWK key set\n     *\n     * @throws IllegalStateException if no JWK set associated with the provided token is found from {@code jwkProvider}\n     */\n    private static Jwk getJwk(@NotNull final JwkProvider jwkProvider, @NotNull final String accessToken) {\n        try {\n            return jwkProvider.get(JWT.decode(accessToken).getKeyId());\n        } catch (final JwkException exception) {\n            final String message = "The key ID in the access token does not match any JWK";\n            LOG.error(message, exception);\n            throw new IllegalStateException(message, exception);\n        }\n    }\n\n    /**\n     * Returns the verifying algorithm associated with a specified JWK.\n     *\n     * @param jwk  The JWK contains the public key for decrypting the token signature, cannot be {@code null}\n     *\n     * @return a decrypting algorithm with public key and without private key enclosed\n     *\n     * @throws IllegalStateException if public key cannot be retrieved from the JWK\n     */\n    private static Algorithm getVerificationAlgorithm(@NotNull final Jwk jwk) {\n        try {\n            return Algorithm.ECDSA384((ECPublicKey) jwk.getPublicKey(), null);\n        } catch (final InvalidPublicKeyException exception) {\n            final String message = "The public key cannot be build from JWK";\n            LOG.error(message, exception);\n            throw new IllegalStateException(message, exception);\n        }\n    }\n\n    @NotNull\n    private String getJwksUrl() {\n        return jwksUrl;\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.section,{"data-footnotes":!0,className:"footnotes",children:[(0,r.jsx)(n.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{id:"user-content-fn-1",children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://stackoverflow.com/a/58965516",children:"https://stackoverflow.com/a/58965516"})," ",(0,r.jsx)(n.a,{href:"#user-content-fnref-1","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},6179:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/oauth2-filtering-55a04bfd363909bef6e9536709b82c36.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>a});var r=t(7294);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);